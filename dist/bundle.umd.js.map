{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/traversals.js"],"sourcesContent":["import { collections, } from 'turmeric';\n\nconst { spread, addMap, get, flatTuple, mapDiff, removeMap } = collections;\n\nexport const nabeMap = edges => src => new Map(get(edges)(src));\nexport const addSrc = (edges, src) => addMap(edges)(src)(nabeMap(edges)(src));\n\nexport const addEdgeBin = (edges = new Map, [ src, nb, wt = 0 ]) => edges\n  .set(src, addMap(nabeMap(edges)(src))(nb)(wt))\n  .set(nb, addMap(nabeMap(edges)(nb))(src)(wt));\n\nexport const rmEdgeBin = (edges = new Map, [ src, nb, ]) => edges\n  .set(src, removeMap(edges.get(src))(nb))\n  .set(nb, removeMap(edges.get(src))(src));\n\nexport const clearNeighborsBin = (edges = new Map, src) => edges.set(src, new Map);\n\nexport const importEdgeBin = (edges = new Map, [ src, nbs ] = [{}, new Map ]) =>\n   spread(mapDiff(nbs)(edges.get(src))).map(flatTuple(src))\n     .reduce(addEdgeBin, addSrc(edges, src));\n","import { collections, } from 'turmeric';\nimport { addEdgeBin, addSrc, clearNeighborsBin, importEdgeBin, rmEdgeBin, }\nfrom './reducers';\n\nconst { spread, triple, get, spreadK, hasK, } = collections;\nconst { addBinMap, removeBin, uniteMap, } = collections;\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elems) => elems.reduce(addSrc, copy());\nexport const nodes = edges => spreadK(copy(edges));\nexport const adj = edges => src => copy(get(edges)(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const addNodes = edges => (...srcs) => srcs.reduce(addSrc, edges);\nexport const removeNodes = edges => (...srcs) => srcs.reduce(removeBin, edges);\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(triple(0)(src)).reduce(rmEdgeBin, edges);\n\nexport const mergeEdges = (edges = new Map) => (altEdges = new Map) =>\n copy(spread(altEdges).reduce(importEdgeBin, edges));\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [ n, w ]);\n\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n\nexport const clearNeighbors = (edges = new Map) => (...srcs) =>\n  srcs.reduce(clearNeighborsBin, edges);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric';\n\nconst { addSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [n, w = 0]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [n, w] = [lastK(path), 0]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [n, w]));\n  \n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n    \n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n  \n  return bVisit(initPath(iNode))(new Set([iNode]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([iNode]);\n  const solutionSet = initPath(iNode);\n  \n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n    \n    for (const [nabe, nWeight] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n      \n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n  \n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n  \n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n"],"names":["spread","collections","addMap","get","flatTuple","mapDiff","removeMap","nabeMap","Map","edges","src","addSrc","addEdgeBin","nb","wt","set","rmEdgeBin","clearNeighborsBin","importEdgeBin","nbs","map","reduce","triple","spreadK","hasK","addBinMap","removeBin","uniteMap","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","node","isAdjacent","nabe","addNodes","srcs","removeNodes","addEdges","w","nabes","removeEdges","mergeEdges","altEdges","addNeighbor","n","addEntry","clearNeighbors","mergeNeighbors","addSet","lastK","diff","spreadV","popFirst","tuple","pathVal","pred","length","weight","path","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0"],"mappings":"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"}