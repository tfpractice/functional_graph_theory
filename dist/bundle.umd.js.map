{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/traversals.js"],"sourcesContent":["import { collections as coll, } from 'turmeric';\n\nconst { asMap, addBinMap, mapDiff, spread, addMap, get, flatTuple, removeMap } = coll;\n\nexport const resetNodeBin = (edges, src) => addMap(edges)(src)(new Map);\n\nexport const addNodeBin = (edges, src) =>\n  addMap(edges)(src)(new Map(get(edges)(src)));\n\nexport const addEdgeBin = (edges, [ src, nb, wt = 0 ]) => [\n  [ src, addMap(get(edges)(src))(nb)(wt) ],\n  [ nb, addMap(get(edges)(nb))(src)(wt) ],].reduce(addBinMap, new Map(edges));\n\nexport const removeEdgeBin = (edges, [ src, nb, ]) => [\n  [ src, removeMap(get(edges)(src))(nb) ],\n  [ nb, removeMap(get(edges)(nb))(src) ],].reduce(addBinMap, new Map(edges));\n\nexport const importEdgeBin = (edges, [ src, nbs ]) =>\nspread(mapDiff(nbs)(get(edges)(src))).map(flatTuple(src))\n  .reduce(addEdgeBin, addNodeBin(edges, src));\n","import { collections, } from 'turmeric';\nimport { addEdgeBin, addNodeBin, importEdgeBin, removeEdgeBin, resetNodeBin, }\nfrom './reducers';\n\nconst { spread, triple, get, spreadK, hasK, } = collections;\nconst { addBinMap, removeBin, uniteMap, } = collections;\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elems) => elems.reduce(addNodeBin, copy());\nexport const nodes = edges => spreadK(copy(edges));\nexport const adj = edges => src => copy(get(edges)(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const addNodes = edges => (...srcs) => srcs.reduce(addNodeBin, edges);\nexport const removeNodes = edges => (...srcs) => srcs.reduce(removeBin, copy(edges));\nexport const resetNodes = edges => (...srcs) => srcs.reduce(resetNodeBin, edges);\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(triple(0)(src)).reduce(removeEdgeBin, edges);\n\nexport const mergeEdgesBin = (edges, alts) =>\n  spread(alts).reduce(importEdgeBin, edges);\n\nexport const mergeEdges = edges => (...alts) =>\n   alts.reduce(mergeEdgesBin, edges);\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [ n, w ]);\n\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric';\n\nconst { addBinSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n\n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n\n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addBinSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n\n  return bVisit(initPath(iNode))(new Set([ iNode ]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([ iNode ]);\n  const solutionSet = initPath(iNode);\n\n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n\n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n\n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n\n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n\n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n"],"names":["coll","addBinMap","mapDiff","spread","addMap","get","flatTuple","removeMap","resetNodeBin","edges","src","Map","addNodeBin","addEdgeBin","nb","wt","reduce","removeEdgeBin","importEdgeBin","nbs","map","collections","triple","spreadK","hasK","removeBin","uniteMap","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","node","isAdjacent","nabe","addNodes","srcs","removeNodes","resetNodes","addEdges","w","nabes","removeEdges","mergeEdgesBin","alts","mergeEdges","addNeighbor","n","addEntry","mergeNeighbors","addBinSet","lastK","diff","spreadV","popFirst","tuple","pathVal","pred","length","weight","addSrc","path","set","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0"],"mappings":"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"}