{"version":3,"file":"bundle.umd.js","sources":["../node_modules/fenugreek-collections/dist/bundle.es6.js","../src/reducers.js","../src/graph.js","../src/path.js","../src/components.js","../src/search.js","../src/strings.js","../src/contract.js"],"sourcesContent":["// **isIterable** `:: obj -> bool`  \n// checks if an object is iterable\nvar isIterable = function isIterable(o) {\n  return !!o[Symbol.iterator];\n};\n\n// **iterify** `:: obj -> iterable`  \n// returns the object or an Iterable<a> containging the object\nvar iterify = function iterify(o) {\n  return isIterable(o) ? o : [o];\n};\n\n// ** isRemovable **`:: obj -> bool`  \n// checks if an object has the delete method\nvar isRemovable = function isRemovable(c) {\n  return !!c.delete;\n};\n\n// ** isHasable **`:: obj -> bool`\n// checks if an object has the 'has' method\nvar isHasable = function isHasable(c) {\n  return !!c.has;\n};\n\n// ** removify **`:: obj -> [map|set] ` \n// returns the object or an Iterable<a> containging the object\nvar removify = function removify(c) {\n  return isRemovable(c) ? c : new Set(iterify(c));\n};\n\n// ** hasify ** `:: obj -> [map|set] ` \n// returns the object or an Iterable<a> containging the object\nvar hasify = function hasify(c) {\n  return isHasable(c) ? c : new Set(iterify(c));\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n// requires [iterify](iterable.html)\n// **spread** `:: Iterable<a> -> Iterable<a>`  \n// returns an Iterable<a> of the collections default iterator\nvar spread = function spread() {\n  var coll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return [].concat(toConsumableArray(iterify(coll)));\n};\n\n// **spreadK** `:: Iterable<a> -> Iterable<a>`  \n// returns an Iterable<a> of the collections keys\nvar spreadK = function spreadK() {\n  var coll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return spread(iterify(coll).keys());\n};\n\n// **spreadV** `:: Iterable<a> -> Iterable<a>`  \n// returns an Iterable<a> of the collections values\nvar spreadV = function spreadV() {\n  var coll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return spread(iterify(coll).values());\n};\n\n// **spreadE** `:: Iterable<a> -> Iterable<a>`  \n// returns an Iterable<a> of the collections entries\nvar spreadE = function spreadE() {\n  var coll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return spread(iterify(coll).entries());\n};\n\n// **spreadKV** `:: Iterable<a> -> Iterable<a>`  \n// returns an Iterable<a> of the collections entries\nvar spreadKV = spreadE;\n\n// export default spread;\n\n// requires [iterify](iterable.html)\n// **tuple** `:: a -> a -> [a]`  \n// returns a [val, key] Iterable<a>\nvar tuple = function tuple(val) {\n  return function (key) {\n    return [key, val];\n  };\n};\n\n// **tupleBin** `:: (a, a) -> [a]`  \n// returns a [val, key] Iterable<a>\nvar tupleBin = function tupleBin(v, k) {\n  return tuple(v)(k);\n};\n\n// **triple** `:: a -> a -> a -> [a]`  \n// returns a [val, key0, key1] Iterable<a>\nvar triple = function triple(val) {\n  return function (key0) {\n    return function (key1) {\n      return [key0, key1, val];\n    };\n  };\n};\n\n// **flatten** `:: Iterable<a> -> Iterable<a> -> [a]`  \n// returns an Iterable<a> of the contents of two iterables\nvar flatten = function flatten(c0) {\n  return function (c1) {\n    return [].concat(toConsumableArray(iterify(c0)), toConsumableArray(iterify(c1)));\n  };\n};\n\n// **flattenBin** `:: (Iterable<a>, Iterable<a>) -> [a]`  \n// returns an Iterable<a> of the contents of two iterables\nvar flattenBin = function flattenBin(c0, c1) {\n  return flatten(c0)(c1);\n};\n\n// **flatTuple** `:: a -> [a] -> [a]`  \n// concatenates an object and an iterable\nvar flatTuple = function flatTuple(c0) {\n  return function (c1) {\n    return [c0].concat(toConsumableArray(iterify(c1)));\n  };\n};\n\n// **flatTupleBin** `:: (Iterable<a>, [a]) -> [a]`  \n// concatenates an object and an iterable\nvar flatTupleBin = function flatTupleBin(c0, c1) {\n  return flatTuple(c0)(c1);\n};\n\n// **append** `:: Iterable<a> -> a -> [a]`  \n// concatenates an iterable and an object\nvar append = function append(coll) {\n  return function (val) {\n    return [].concat(toConsumableArray(iterify(coll)), [val]);\n  };\n};\n\n// **appendBin** `:: (Iterable<a>,a) -> [a]`  \n// concatenates an iterable and an object\nvar appendBin = function appendBin(c, v) {\n  return append(c)(v);\n};\n\n// requires [spread](spread.html), and [iterable](iterable.html)\n// **has** `:: Iterable<a> -> a -> bool`  \n// checks if an iterable contains an element\nvar has = function has(coll) {\n  return function (el) {\n    return hasify(coll).has(el);\n  };\n};\n\n// **xhas** `:: Iterable<a> -> a -> bool`  \n// checks if an iterable does not contain an element\nvar xhas = function xhas(coll) {\n  return function (el) {\n    return !has(coll)(el);\n  };\n};\n\n// **hasK** `:: Iterable<a> -> a -> bool`  \n// checks if an iterables keys contains an element\nvar hasK = function hasK(coll) {\n  return function (k) {\n    return has(spreadK(coll))(k);\n  };\n};\n\n// **xhasK** `:: Iterable<a> -> a -> bool`  \n// checks if an iterables keys does not contain an element\nvar xhasK = function xhasK(coll) {\n  return function (k) {\n    return !hasK(coll)(k);\n  };\n};\n\n// **hasV** `:: Iterable<a> -> a -> bool`  \n// checks if an iterables values contain an element\nvar hasV = function hasV(coll) {\n  return function (v) {\n    return has(spreadV(coll))(v);\n  };\n};\n\n// **xhasV** `:: Iterable<a> -> a -> bool`  \n// checks if an iterables values does not contain an element\nvar xhasV = function xhasV(coll) {\n  return function (v) {\n    return !hasV(coll)(v);\n  };\n};\n\n// **hasKV** `:: Iterable<a> -> [k,v] -> bool`  \n// checks if an iterables keys contain the key of a [k,v] pair\nvar hasKV = function hasKV(coll) {\n  return function (_ref) {\n    var _ref2 = slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n\n    return hasK(coll)(k);\n  };\n};\n\n// **xhasKV** `:: Iterable<a> -> [k,v] -> bool`  \n// checks if an iterables keys do not contain the key of a [k,v] pair\nvar xhasKV = function xhasKV(coll) {\n  return function (_ref3) {\n    var _ref4 = slicedToArray(_ref3, 2),\n        k = _ref4[0],\n        v = _ref4[1];\n\n    return !hasKV(coll)([k, v]);\n  };\n};\n\n// requires [spread](spread.html)\n// **asArray** `:: Iterable<a> -> [a]`  \n// returns an Iterable<a> of the collections default iterator\nvar asArray = function asArray(c) {\n  return spread(c);\n};\n\n// **asSet** `:: Iterable<a> -> Set[a]`  \n// returns an Iterable<a> of the collections default iterator\nvar asSet = function asSet(c) {\n  return new Set(spread(c));\n};\n\n// **asMap** `:: Iterable<a> -> Map[a]`  \n// returns an Iterable<a> of the collections default iterator\nvar asMap = function asMap(c) {\n  return new Map(spreadKV(c));\n};\n\n// requires [spread](spread.html),[iterable](iterable.html),[cast](cast.html), and [group](group.html)\n// **addBin** `:: [a] -> a -> [a]`  \n// adds an element to a collection;\nvar addBin = function addBin(c, el) {\n  return append(c)(el);\n};\n\n// **addBinSet** `:: a -> a -> Set[a]`  \n// adds an element to a Set;\nvar addBinSet = function addBinSet(c, el) {\n  return new Set(append(c)(el));\n};\n\n// **addBinMap** `:: a -> a -> Map[a]`  \n// adds an element to a Map;\nvar addBinMap = function addBinMap(c, el) {\n  return new Map(append(c)(el));\n};\n\n// **removeBin** `:: Iterable<a> -> a -> Iterable<a>`  \n// removes an element from a collection;\nvar removeBin = function removeBin(c, el) {\n  return removify(c).delete(el) ? c : c;\n};\n\n// **removeBinArray** `:: Iterable<a> -> a -> [a]`  \n// returns a [val, key] arrayimport spread from './spread';\nvar removeBinArray = function removeBinArray(c, el) {\n  return spread(removeBin(asSet(c), el));\n};\n\n// **removeBinTuple** `:: a -> a -> [a]`  \n// returns a [val, key] arrayimport spread from './spread';\nvar removeBinTuple = function removeBinTuple(c, _ref) {\n  var _ref2 = slicedToArray(_ref, 2),\n      k = _ref2[0],\n      v = _ref2[1];\n\n  return removeBin(asMap(c), k);\n};\n\n// requires [has](has.html), [spread](spread.html), and [reducers](reducers.html)\n// **inter** `:: Iterable<a> -> Iterable<a> -> [a]`  \n// returns elements shared between two iterables;\nvar inter = function inter(c0) {\n  return function (c1) {\n    return spread(c0).filter(hasK(c1));\n  };\n};\n\n// **diff** `:: Iterable<a> -> Iterable<a> -> [a]`  \n// returns elements of the first iterable absent from the second iterable\nvar diff = function diff(c0) {\n  return function (c1) {\n    return spread(c0).filter(xhasK(c1));\n  };\n};\n\n// **union** `:: Iterable<a> -> Iterable<a> -> [a]`  \n// returns elements of both iterables\nvar union = function union(c0) {\n  return function (c1) {\n    return spread(c0).concat(diff(c1)(c0));\n  };\n};\n\n// **mapInter** `:: Map[{k:v}] -> Map[{k:v}] -> Map[{k:v}]`  \n// returns elements shared between two maps;\nvar mapInter = function mapInter(c0) {\n  return function (c1) {\n    return spread(c0).filter(hasKV(c1)).reduce(addBinMap, new Map());\n  };\n};\n\n// **mapDiff** `:: Map[{k:v}] -> Map[{k:v}] -> Map[{k:v}]`  \n// returns elements of the first map absent from the second map\nvar mapDiff = function mapDiff(c0) {\n  return function (c1) {\n    return spread(c0).filter(xhasKV(c1)).reduce(addBinMap, new Map());\n  };\n};\n\n// **mapUnion** `:: Map[{k:v}] -> Map[{k:v}] -> Map[{k:v}]`  \n// returns elements of both maps\nvar mapUnion = function mapUnion(c0) {\n  return function (c1) {\n    return spread(mapDiff(c1)(c0)).reduce(addBinMap, new Map(c0));\n  };\n};\n\n// **mapUnion** `:: Map[{k:v}] -> Map[{k:v}] -> Map[{k:v}]`  \n// returns elements of both maps\nvar uniteMap = function uniteMap(c0) {\n  return function (c1) {\n    return spread(mapDiff(c1)(c0)).reduce(addBinMap, c0);\n  };\n};\n\n// requires [spread](spread.html),[reducers](reducers.html), and [cast](cast.html)\n// **addMap** `:: Map[{k:v}] -> k -> v -> Map[{k:v}]`  \n// adds an element to a Map;\nvar addMap = function addMap(c) {\n  return function (k) {\n    return function (v) {\n      return asMap(c).set(k, v);\n    };\n  };\n};\n\n// **addMapTuple** `:: Map[{k:v}] -> (...{k:v}) -> Map[{k:v}]`  \n// adds multiple [k,v] pairs to an iterable;\nvar addMapTuple = function addMapTuple(c) {\n  return function () {\n    for (var _len = arguments.length, tups = Array(_len), _key = 0; _key < _len; _key++) {\n      tups[_key] = arguments[_key];\n    }\n\n    return tups.reduce(addBinMap, c);\n  };\n};\n\n// **addSet** `:: Set[a] -> (...a) -> Set[a]`  \n// adds multiple elements to a Set;\nvar addSet = function addSet(c) {\n  return function () {\n    for (var _len2 = arguments.length, els = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      els[_key2] = arguments[_key2];\n    }\n\n    return els.reduce(addBinSet, c);\n  };\n};\n\n// **removeSet** `:: Set[a] -> (...a) -> Set[a]`  \n// removes multiple elements from a Set;\nvar removeSet = function removeSet(c) {\n  return function () {\n    for (var _len3 = arguments.length, els = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      els[_key3] = arguments[_key3];\n    }\n\n    return els.reduce(removeBin, asSet(c));\n  };\n};\n\n// **removeMap** `:: Map[{k:v}] -> (...k) -> Map[{k:v}]`  \n// removes multiple keys from a Map;\nvar removeMap = function removeMap(c) {\n  return function () {\n    for (var _len4 = arguments.length, els = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      els[_key4] = arguments[_key4];\n    }\n\n    return els.reduce(removeBin, asMap(c));\n  };\n};\n\n// **removeMapTuple** `:: Map[{k:v}] -> (...{k:v}) -> Map[{k:v}]`  \n// removes multiple [k,v] pairs from a Map;\nvar removeMapTuple = function removeMapTuple(c) {\n  return function () {\n    for (var _len5 = arguments.length, tups = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      tups[_key5] = arguments[_key5];\n    }\n\n    return tups.reduce(removeBinTuple, asMap(c));\n  };\n};\n\n// **popElem** `:: Iterable<a> -> a -> Iterable<a>`  \n// removes the last element from an iterable;\nvar popElem = function popElem(c) {\n  return function (el) {\n    return removeBin(c, el) && el;\n  };\n};\n\n// **popFirst** `:: Iterable<a> -> a -> Iterable<a>`  \n// removes the first element from an iterable;\nvar popFirst = function popFirst(c) {\n  return popElem(c)(spread(c).shift());\n};\n\n// requires [cast](cast.html), and [spread](spread.html)\n// **get** `:: Iterable<{k:v}> -> k -> v`  \n// retrieves a value stored at a key from a collection\nvar get$1 = function get(c) {\n  return function (k) {\n    return asMap(c).get(k);\n  };\n};\n\n// **fromIndex** `:: Iterable<a> -> number -> a`  \n// returns the value stored at an Iterable<a> position\nvar fromIndex = function fromIndex() {\n  var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();\n  return function (i) {\n    return spread(c).slice(i, i + 1).shift();\n  };\n};\n\n// **first** `:: Iterable<a> -> a`  \n// returns the first element of an iterable\nvar first = function first() {\n  var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return spread(c).shift();\n};\n\n// **last** `:: Iterable<a> -> a`  \n// returns the last element of an iterable\nvar last = function last() {\n  var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return spread(c).pop();\n};\n\n// **firstK** `:: Iterable<{k:v}>  -> k`  \n// returns the first key of an iterable\nvar firstK = function firstK() {\n  var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return first(spreadK(c));\n};\n\n// **lastK** `:: Iterable<{k:v}>  -> k`  \n// returns the last key of an iterable\nvar lastK = function lastK() {\n  var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return last(spreadK(c));\n};\n\n// **firstV** `:: Iterable<a> -> a`  \n// returns the first value of an iterable\nvar firstV = function firstV() {\n  var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return first(spreadV(c));\n};\n\n// **lastV** `:: Iterable<a> -> a -> [a]`  \n// returns the last value of an iterable\nvar lastV = function lastV() {\n  var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return last(spreadV(c));\n};\n\n// exports [iterable](spread.html)\n\nexport { isIterable, iterify, isRemovable, isHasable, removify, hasify, spread, spreadK, spreadV, spreadE, spreadKV, tuple, tupleBin, triple, flatten, flattenBin, flatTuple, flatTupleBin, append, appendBin, has, xhas, hasK, xhasK, hasV, xhasV, hasKV, xhasKV, addBin, addBinSet, addBinMap, removeBin, removeBinArray, removeBinTuple, inter, diff, union, mapInter, mapDiff, mapUnion, uniteMap, addMap, addMapTuple, addSet, removeSet, removeMap, removeMapTuple, popElem, popFirst, get$1 as get, fromIndex, first, last, firstK, lastK, firstV, lastV, asArray, asSet, asMap };\n//# sourceMappingURL=bundle.es6.js.map\n","import { addBinMap, addMap, append, asMap, flatTuple,\n  get, mapDiff, removeMap, spread, spreadK, } from 'fenugreek-collections';\n\n// **resetNodeBin** `:: ( Map<edge>, node ) -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const resetNodeBin = (edges, src) => addMap(edges)(src)(asMap());\n\n// **addNodeBin** `:: ( Map<edge>, node ) -> Map<edge>`\n// adds a node:adjacency list pair to an edgelist\nexport const addNodeBin = (edges, src) => addMap(edges)(src)(get(edges)(src));\n\n// **neighborPairs** `:: ( Map<edge>, node ) -> [ [node, node] ]`\n// returns an array of [node, neigbor] pairs from an edgelist\nexport const neighborPairs = edges => src =>\nspreadK(get(edges)(src)).map(append(src));\n\n// **addEdgeBin** `:: ( Map<edge>, [node, node, Number] ) -> Map<edge>`\n// add a node:Map<{node: Number}> entry to an edgelist\nexport const addEdgeBin = (edges, [ src, nb, wt = 0 ]) => [\n  [ src, addMap(get(edges)(src))(nb)(wt) ],\n  [ nb, addMap(get(edges)(nb))(src)(wt) ]].reduce(addBinMap, asMap(edges));\n\n// **removeEdgeBin** `:: ( Map<edge>, [node, node] ) -> Map<edge>`\n// removes a {node:Map<{node: Number}>} entry from an edgelist\nexport const removeEdgeBin = (edges, [ src, nb, ]) => [\n  [ src, removeMap(get(edges)(src))(nb) ],\n  [ nb, removeMap(get(edges)(nb))(src) ]].reduce(addBinMap, asMap(edges));\n\n// **disconnectNodeBin** `:: ( Map<edge>, node ) -> Map<edge>`\n// removes all edges connected to a node\nexport const disconnectNodeBin = (edges, src) =>\n  neighborPairs(edges)(src).reduce(removeEdgeBin, asMap(edges));\n\n// **removeNodeBin** `:: ( Map<edge>, node ) -> Map<edge>`\n// isolates a node and removes it from edgelist\nexport const removeNodeBin = (edges, src) =>\nremoveMap(disconnectNodeBin(edges, src))(src);\n\n// **importEdgeBin** `:: ( Map<edge>, [node, [node: Number]] ) -> Map<edge>`\n// appends a node and all of its neighbors to an edgelist\nexport const importEdgeBin = (edges, [ src, nbs ]) =>\nspread(mapDiff(nbs)(get(edges)(src))).map(flatTuple(src))\n  .reduce(addEdgeBin, addNodeBin(edges, src));\n\n// **mergeEdgesBin** `:: ( Map<edge>, Map<edge>, ) -> Map<edge>`\n// combines two Edge maps\nexport const mergeEdgesBin = (edges, alts) =>\n spread(asMap(alts)).reduce(importEdgeBin, edges);\n","import { addBinMap, asMap, get, hasK, removeBin, spreadK, triple, tuple, uniteMap, } from 'fenugreek-collections';\nimport { addEdgeBin, addNodeBin, disconnectNodeBin, mergeEdgesBin, removeEdgeBin, resetNodeBin, }\nfrom './reducers';\n\n// **mergeNeighbors** `::  Map<edge> ->  node  -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const mergeNeighbors = uniteMap;\n\n// **spawn** `::  Map<edge> -> Map<edge>`\n// returns a new Edgelist\nexport const spawn = edges => asMap(edges);\n\n// **copy** `::  Map<edge> -> Map<edge>`\n// creates a copy of a Edgelist\nexport const copy = spawn;\n\n// **fromElements** `::  Map<edge> -> ...node  -> Map<edge>`\n// adds  {node: adjacencyList} pairs ot an Edgelist\nexport const fromElements = (...elems) => elems.reduce(addNodeBin, copy());\n\n// **nodes** `::  Map<edge> ->  [node]\n// returns an array of the nodes\nexport const nodes = edges => spreadK(copy(edges));\n\n// **adj** `::  Map<edge> ->  node  -> Map<{node: Number}>`\n// returns the nodes adjacency list\nexport const adj = edges => src => asMap(get(edges)(src));\n\n// **neighbors** `::  Map<edge> ->  node  -> [node]`\n// returns the nodes neighbors\nexport const neighbors = edges => src => nodes(adj(edges)(src));\n\n// **contains** `::  Map<edge> ->  node  -> Boolean`\n// checks for the presence of a node in an edgelist\nexport const contains = edges => node => hasK(edges)(node);\n\n// **isAdjacent** `::  Map<edge> ->  node  -> Map<edge>`\n// checks for the presence of a neighbor in a node's adjacency list\nexport const isAdjacent = edges => src => nb => contains(adj(edges)(src))(nb);\n\n// **addNodes** `::  Map<edge> ->  ...node  -> Map<edge>`\n// adds nodes to an Edgelist\nexport const addNodes = edges => (...srcs) => srcs.reduce(addNodeBin, edges);\n\n// **resetNodes** `::  Map<edge> ->  ...node  -> Map<edge>`\n// resets the adjacency lists of given nodes to an empty map\nexport const resetNodes = edges => (...src) => src.reduce(resetNodeBin, edges);\n\n// **addEdges** `::  Map<edge> ->  (node, Number) -> ...node  -> Map<edge>`\n// creates edges between a node and multiple other nodes\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\nnabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\n// **removeEdges** `::  Map<edge> ->  node -> ...node  -> Map<edge>`\n// removes edges between a node and select other nodes\nexport const removeEdges = edges => src => (...nabes) =>\nnabes.map(tuple(src)).reduce(removeEdgeBin, edges);\n\n// **disconnectNodes** `:: Map<edge> ->  ...node  -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const disconnectNodes = edges => (...srcs) =>\n srcs.reduce(disconnectNodeBin, copy(edges));\n\n // **removeNodes** `::  Map<edge> ->  ...node  -> Map<edge>`\n // resets the nodes adjacency list to an empty map\nexport const removeNodes = edges => (...srcs) =>\nsrcs.reduce(removeBin, disconnectNodes(edges)(...srcs));\n\n// **mergeEdges** `::  Map<edge> -> ...{node:adjacency} -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const mergeEdges = edges => (...alt) => alt.reduce(mergeEdgesBin, edges);\n\n// **addNeighbor** `::  Map<edge> -> ...{node:adjacency} -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const addNeighbor = edges => src => (n, w = 0) =>\naddBinMap(adj(edges)(src), [ n, w ]);\n\n// **addEntry** `::  Map<{node:Number}> ->  [node, Number]  -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n","import { addBinMap, addBinSet, addMap, asMap, lastK, popFirst,\n   spread, spreadK, spreadV, tuple, } from 'fenugreek-collections';\n\n// **pathEntry** `:: ( node, Number, Number ) -> {pred, length, weight}`\n// returns an object with pred, weight, and length properties\nexport const pathEntry = (pred = null, length = 1, weight = 0) => ({ pred, length, weight });\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n  \n// **addSrc** `:: Map<pathEntry> -> node ->  Map<pathEntry>`\n// adds a {node:{pred, weight, length}} entry to a  path\nexport const appendPath = path => src => addMap(path)(src)(pathEntry(lastK(path), 1, 0));\n\n// **initPath** `:: node -> Map<pathEntry>`\n// initializes a new path given a source node\nexport const initPath = node => appendPath()(node);\n\n// **getWeight** `:: {weight:Number} -> Number`\n// returns an object with pred, weight, and length properties\nexport const getWeight = ({ weight = 0 }) => weight;\n\n// **getLength** `:: {length:Number} -> Number`\n// returns an object with pred, weight, and length properties\nexport const getLength = ({ length = 1 }) => length;\n\n// **lastVal** `:: Map<pathEntry> -> {pred, length, weight}`\n// returns the last entry in the path\nexport const lastVal = path => path.get(lastK(path));\n\n// **lastWeight** `:: Map<pathEntry> -> Number`\n// returns the last weight in the path\nexport const lastWeight = path => getWeight(lastVal(path));\n\n// **lastLength** `:: Map<pathEntry> -> Number`\n// returns the last length in the path\nexport const lastLength = path => getLength(lastVal(path));\n\n// **nextWeight** `:: Map<pathEntry> -> Number -> Number`\n// returns an object with pred, weight, and length properties\nexport const nextWeight = path => (w = 0) => lastWeight(path) + w;\n\n// **nextLength** `:: Map<pathEntry> -> Number -> Number`\n// returns an object with pred, weight, and length properties\nexport const nextLength = path => lastLength(path) ? lastLength(path) + 1 : 1;\n\n// **nextPath** `:: (Map<pathEntry>, [node, Number]) -> Map<pathEntry> `\n// returns an object with pred, weight, and length properties\nexport const nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextLength(path))(nextWeight(path)(w)));\n","import { addBinMap, addSet, diff, spreadK, spreadV, tuple, }\n from 'fenugreek-collections';\n\n // **components** `::  Map<edge> -> Map<component>`\n // maps each node to a set of connected nodes\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, addSet(comp)(node));\n     \n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n  \n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\n// **componentSet** `::  Map<edge> -> Set<component>`\n// partitions an edgelist into sets of connected nodes\nexport const componentSet = edges => new Set(spreadV(components(edges)));\n","import { addBinSet, asSet, get, hasK, lastK, mapDiff, popFirst, spread, spreadK, } from 'fenugreek-collections';\nimport { initPath, nextPath, } from './path';\nimport { components, } from './components';\n\n// **dfs** `:: Map<edge> -> node -> Map<pathEntry>`\n// depth first traversal\nexport const dfs = edges => (src) => {\n  // >**dfs.trav** `:: Map<pathEntry> -> [node, w] -> Map<pathEntry>`\n  // >depth first traversal\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n  \n  return trav(initPath(src));\n};\n\n// **bfs** `:: Map<edge> -> node -> Map<pathEntry>`\n// breadth first traversal\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n    \n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addBinSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n  \n  return bVisit(initPath(iNode))(asSet([ iNode ]));\n};\n\n// **dijkstra** `:: Map<edge> -> node -> Map<pathEntry>`\n// finds shortest paths from a source node to all node reachable from that node\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = asSet([ iNode ]);\n  const solutionSet = initPath(iNode);\n  \n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n    \n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n      \n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n  return solutionSet;\n};\n\n// **pathBetween** `:: Map<edge> -> node -> node -> Boolean`\n// checks for a path between two nodes\nexport const pathBetween = e => n0 => n1 => hasK(get(components(e))(n0))(n1);\n","import { last, spread, spreadK, spreadKV, spreadV, } from 'fenugreek-collections';\n\nexport const redStr = (str = ' ', val, id, coll) =>\n  val === last(coll) ? str.concat(val, ' ') : str.concat(val, ' , ');\nexport const collString = coll => spread(coll).reduce(redStr, '');\nexport const kString = coll => spreadK(coll).reduce(redStr, '');\nexport const vString = coll => spreadV(coll).reduce(redStr, '');\nexport const kvString = coll => spreadKV(coll).reduce(redStr, '');\n\nexport const pathString = path => ` { ${spreadK(path).join(' => ')} }`;\nexport const edgeString = ([ src, nbs ]) => `{ Edge ${src} >> [ ${kString(nbs)} ] } `;\n\nexport const componentString = ([ node, nbs ]) =>\n  `{ component ${node} >> [ ${kString(nbs)} ] } `;\n\nexport const graphString = edges =>\n  spreadKV(edges).reduce((str, [ node, nabes ], id) =>\n    str + edgeString([ node, nabes ]),\n    'Showing Edges\\n');\n\nexport const showGraph = ({ edges }) => (graphString(edges));\n","import { addMap, asMap, asSet, first, flatten, flattenBin, isIterable,\n   removeBin, spread, } from 'fenugreek-collections';\nimport { adj, copy, mergeEdges, neighbors,\n  nodes, removeEdges, removeNodes, resetNodes, spawn, } from './graph';\nimport { graphString, } from './strings';\nimport * as reducers from './reducers';\n\nexport const autoSpread = el =>\nel[Symbol.iterator] ? (spread(el).reduce(flattenBin, []).map(autoSpread)) : el;\n\nexport const superNode = src => nb => asSet([ src, nb ]);\n\nexport const combineNeighbors = g => src => nb =>\n  asSet(flatten(neighbors(g)(src))(neighbors(g)(nb)));\n\nexport const combineAdj = g => src => nb =>\n  asMap(flatten(adj(g)(src))(adj(g)(nb)));\n\nexport const superAdj = g => src => nb =>\n [ src, nb ].reduce(removeBin, combineAdj(g)(src)(nb));\n\nexport const superEdge = g => src => nb =>\n  addMap()(superNode(src)(nb))(superAdj(g)(src)(nb));\n\nexport const contract = g => src => (nb = first(neighbors(g)(src))) =>\nnb ? mergeEdges(removeNodes(g)(src, nb))(superEdge(g)(src)(nb)) : g;\n\nexport const contractBin = (g, [ src, nb ]) => contract(g)(src)(nb);\n\nexport const contractSrc = g => src =>\nreducers.neighborPairs(g)(src).reduce(contractBin, copy(g));\n\nexport const contractNext = (g, n = (first(nodes(g)))) =>\n  contract(copy(g))(n)();\n\nexport const contractAuto = g => nodes(g).reduce(contractNext, g);\nexport const contractMin = (g, min = 2) =>\n g.size > min ? contractMin(contractNext(g), min) : copy(g);\n"],"names":["isIterable","o","Symbol","iterator","iterify","isRemovable","c","delete","isHasable","has","removify","Set","hasify","slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","Array","isArray","Object","TypeError","toConsumableArray","arr2","from","spread","coll","arguments","concat","spreadK","keys","spreadV","values","spreadE","entries","spreadKV","tuple","val","key","triple","key0","key1","flatten","c0","c1","flattenBin","flatTuple","append","el","hasK","k","xhasK","hasKV","_ref","_ref2","xhasKV","_ref3","_ref4","v","asSet","asMap","Map","addBinSet","addBinMap","removeBin","diff","filter","mapDiff","reduce","uniteMap","addMap","set","addSet","_len2","els","_key2","removeMap","_len4","_key4","popElem","popFirst","shift","get$1","get","first","last","pop","lastK","resetNodeBin","edges","src","addNodeBin","neighborPairs","map","addEdgeBin","nb","wt","removeEdgeBin","disconnectNodeBin","removeNodeBin","importEdgeBin","nbs","mergeEdgesBin","alts","mergeNeighbors","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","node","isAdjacent","addNodes","srcs","resetNodes","addEdges","w","nabes","removeEdges","disconnectNodes","removeNodes","mergeEdges","alt","addNeighbor","n","addEntry","pathEntry","pred","weight","pathVal","appendPath","path","initPath","getWeight","getLength","lastVal","lastWeight","lastLength","nextWeight","nextLength","nextPath","components","trav","comp","visitMap","mMap","componentSet","dfs","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nabe","nWeight","prevMap","rWeight","dMap","sMap","add","pathBetween","e","n0","n1","redStr","str","collString","kString","vString","kvString","pathString","join","edgeString","componentString","graphString","id","showGraph","autoSpread","superNode","combineNeighbors","g","combineAdj","superAdj","superEdge","contract","contractBin","contractSrc","reducers","contractNext","contractAuto","contractMin","min"],"mappings":"gOAEA,IAAIA,GAAa,SAAoBC,GACnC,QAASA,EAAEC,OAAOC,WAKhBC,EAAU,SAAiBH,GAC7B,MAAOD,GAAWC,GAAKA,GAAKA,IAK1BI,EAAc,SAAqBC,GACrC,QAASA,EAAEC,QAKTC,EAAY,SAAmBF,GACjC,QAASA,EAAEG,KAKTC,EAAW,SAAkBJ,GAC/B,MAAOD,GAAYC,GAAKA,EAAI,GAAIK,KAAIP,EAAQE,KAK1CM,EAAS,SAAgBN,GAC3B,MAAOE,GAAUF,GAAKA,EAAI,GAAIK,KAAIP,EAAQE,KAGxCO,EAAgB,WAClB,QAASC,GAAcC,EAAKC,GAC1B,GAAIC,MACAC,GAAK,EACLC,GAAK,EACLC,EAAKC,MAET,KACE,IAAK,GAAiCC,GAA7BC,EAAKR,EAAIb,OAAOC,cAAmBe,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAETX,GAAKC,EAAKW,SAAWZ,GAH8CE,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,UAEL,KACOX,GAAMK,EAAW,QAAGA,EAAW,iBAEpC,GAAIJ,EAAI,KAAMC,IAIlB,MAAOH,GAGT,MAAO,UAAUF,EAAKC,GACpB,GAAIc,MAAMC,QAAQhB,GAChB,MAAOA,EACF,IAAIb,OAAOC,WAAY6B,QAAOjB,GACnC,MAAOD,GAAcC,EAAKC,EAE1B,MAAM,IAAIiB,WAAU,4DAiBtBC,EAAoB,SAAUnB,GAChC,GAAIe,MAAMC,QAAQhB,GAAM,CACtB,IAAK,GAAIC,GAAI,EAAGmB,EAAOL,MAAMf,EAAIa,QAASZ,EAAID,EAAIa,OAAQZ,IAAKmB,EAAKnB,GAAKD,EAAIC,EAE7E,OAAOmB,GAEP,MAAOL,OAAMM,KAAKrB,IAOlBsB,EAAS,WACX,GAAIC,GAAOC,UAAUX,OAAS,GAAsBP,SAAjBkB,UAAU,GAAmBA,UAAU,KAC1E,UAAUC,OAAON,EAAkB9B,EAAQkC,MAKzCG,EAAU,WACZ,GAAIH,GAAOC,UAAUX,OAAS,GAAsBP,SAAjBkB,UAAU,GAAmBA,UAAU,KAC1E,OAAOF,GAAOjC,EAAQkC,GAAMI,SAK1BC,EAAU,WACZ,GAAIL,GAAOC,UAAUX,OAAS,GAAsBP,SAAjBkB,UAAU,GAAmBA,UAAU,KAC1E,OAAOF,GAAOjC,EAAQkC,GAAMM,WAK1BC,EAAU,WACZ,GAAIP,GAAOC,UAAUX,OAAS,GAAsBP,SAAjBkB,UAAU,GAAmBA,UAAU,KAC1E,OAAOF,GAAOjC,EAAQkC,GAAMQ,YAK1BC,EAAWF,EAOXG,EAAQ,SAAeC,GACzB,MAAO,UAAUC,GACf,OAAQA,EAAKD,KAYbE,EAAS,SAAgBF,GAC3B,MAAO,UAAUG,GACf,MAAO,UAAUC,GACf,OAAQD,EAAMC,EAAMJ,MAOtBK,EAAU,SAAiBC,GAC7B,MAAO,UAAUC,GACf,SAAUhB,OAAON,EAAkB9B,EAAQmD,IAAMrB,EAAkB9B,EAAQoD,OAM3EC,EAAa,SAAoBF,EAAIC,GACvC,MAAOF,GAAQC,GAAIC,IAKjBE,EAAY,SAAmBH,GACjC,MAAO,UAAUC,GACf,OAAQD,GAAIf,OAAON,EAAkB9B,EAAQoD,OAY7CG,EAAS,SAAgBrB,GAC3B,MAAO,UAAUW,GACf,SAAUT,OAAON,EAAkB9B,EAAQkC,KAASW,MAapDxC,EAAM,SAAa6B,GACrB,MAAO,UAAUsB,GACf,MAAOhD,GAAO0B,GAAM7B,IAAImD,KAcxBC,EAAO,SAAcvB,GACvB,MAAO,UAAUwB,GACf,MAAOrD,GAAIgC,EAAQH,IAAOwB,KAM1BC,EAAQ,SAAezB,GACzB,MAAO,UAAUwB,GACf,OAAQD,EAAKvB,GAAMwB,KAsBnBE,EAAQ,SAAe1B,GACzB,MAAO,UAAU2B,GACf,GAAIC,GAAQrD,EAAcoD,EAAM,GAC5BH,EAAII,EAAM,EACNA,GAAM,EAEd,OAAOL,GAAKvB,GAAMwB,KAMlBK,EAAS,SAAgB7B,GAC3B,MAAO,UAAU8B,GACf,GAAIC,GAAQxD,EAAcuD,EAAO,GAC7BN,EAAIO,EAAM,GACVC,EAAID,EAAM,EAEd,QAAQL,EAAM1B,IAAOwB,EAAGQ,MAaxBC,EAAQ,SAAejE,GACzB,MAAO,IAAIK,KAAI0B,EAAO/B,KAKpBkE,EAAQ,SAAelE,GACzB,MAAO,IAAImE,KAAI1B,EAASzC,KAYtBoE,EAAY,SAAmBpE,EAAGsD,GACpC,MAAO,IAAIjD,KAAIgD,EAAOrD,GAAGsD,KAKvBe,EAAY,SAAmBrE,EAAGsD,GACpC,MAAO,IAAIa,KAAId,EAAOrD,GAAGsD,KAKvBgB,EAAY,SAAmBtE,EAAGsD,GACpC,MAAOlD,GAASJ,GAAGC,OAAOqD,GAAMtD,EAAIA,GA8BlCuE,EAAO,SAActB,GACvB,MAAO,UAAUC,GACf,MAAOnB,GAAOkB,GAAIuB,OAAOf,EAAMP,MAsB/BuB,EAAU,SAAiBxB,GAC7B,MAAO,UAAUC,GACf,MAAOnB,GAAOkB,GAAIuB,OAAOX,EAAOX,IAAKwB,OAAOL,EAAW,GAAIF,QAc3DQ,EAAW,SAAkB1B,GAC/B,MAAO,UAAUC,GACf,MAAOnB,GAAO0C,EAAQvB,GAAID,IAAKyB,OAAOL,EAAWpB,KAOjD2B,EAAS,SAAgB5E,GAC3B,MAAO,UAAUwD,GACf,MAAO,UAAUQ,GACf,MAAOE,GAAMlE,GAAG6E,IAAIrB,EAAGQ,MAmBzBc,EAAS,SAAgB9E,GAC3B,MAAO,YACL,IAAK,GAAI+E,GAAQ9C,UAAUX,OAAQ0D,EAAMxD,MAAMuD,GAAQE,EAAQ,EAAGA,EAAQF,EAAOE,IAC/ED,EAAIC,GAAShD,UAAUgD,EAGzB,OAAOD,GAAIN,OAAON,EAAWpE,KAkB7BkF,EAAY,SAAmBlF,GACjC,MAAO,YACL,IAAK,GAAImF,GAAQlD,UAAUX,OAAQ0D,EAAMxD,MAAM2D,GAAQC,EAAQ,EAAGA,EAAQD,EAAOC,IAC/EJ,EAAII,GAASnD,UAAUmD,EAGzB,OAAOJ,GAAIN,OAAOJ,EAAWJ,EAAMlE,MAkBnCqF,EAAU,SAAiBrF,GAC7B,MAAO,UAAUsD,GACf,MAAOgB,GAAUtE,EAAGsD,IAAOA,IAM3BgC,EAAW,SAAkBtF,GAC/B,MAAOqF,GAAQrF,GAAG+B,EAAO/B,GAAGuF,UAM1BC,EAAQ,SAAaxF,GACvB,MAAO,UAAUwD,GACf,MAAOU,GAAMlE,GAAGyF,IAAIjC,KAepBkC,EAAQ,WACV,GAAI1F,GAAIiC,UAAUX,OAAS,GAAsBP,SAAjBkB,UAAU,GAAmBA,UAAU,KACvE,OAAOF,GAAO/B,GAAGuF,SAKfI,EAAO,WACT,GAAI3F,GAAIiC,UAAUX,OAAS,GAAsBP,SAAjBkB,UAAU,GAAmBA,UAAU,KACvE,OAAOF,GAAO/B,GAAG4F,OAYfC,EAAQ,WACV,GAAI7F,GAAIiC,UAAUX,OAAS,GAAsBP,SAAjBkB,UAAU,GAAmBA,UAAU,KACvE,OAAO0D,GAAKxD,EAAQnC,2aC/fT8F,EAAe,SAACC,EAAOC,SAAQpB,GAAOmB,GAAOC,GAAK9B,MAIlD+B,EAAa,SAACF,EAAOC,SAAQpB,GAAOmB,GAAOC,GAAKP,EAAIM,GAAOC,KAI3DE,EAAgB,kBAAS,mBACtC/D,GAAQsD,EAAIM,GAAOC,IAAMG,IAAI9C,EAAO2C,MAIvBI,EAAa,SAACL,kBAASC,OAAKK,cAAIC,aAAK,YAC9CN,EAAKpB,EAAOa,EAAIM,GAAOC,IAAMK,GAAIC,KACjCD,EAAIzB,EAAOa,EAAIM,GAAOM,IAAKL,GAAKM,KAAO5B,OAAOL,EAAWH,EAAM6B,KAItDQ,EAAgB,SAACR,kBAASC,OAAKK,eACxCL,EAAKd,EAAUO,EAAIM,GAAOC,IAAMK,KAChCA,EAAInB,EAAUO,EAAIM,GAAOM,IAAKL,KAAQtB,OAAOL,EAAWH,EAAM6B,KAIrDS,EAAoB,SAACT,EAAOC,SACvCE,GAAcH,GAAOC,GAAKtB,OAAO6B,EAAerC,EAAM6B,KAI3CU,EAAgB,SAACV,EAAOC,SACrCd,GAAUsB,EAAkBT,EAAOC,IAAMA,IAI5BU,EAAgB,SAACX,kBAASC,OAAKW,aAC5C5E,GAAO0C,EAAQkC,GAAKlB,EAAIM,GAAOC,KAAOG,IAAI/C,EAAU4C,IACjDtB,OAAO0B,EAAYH,EAAWF,EAAOC,KAI3BY,EAAgB,SAACb,EAAOc,SACpC9E,GAAOmC,EAAM2C,IAAOnC,OAAOgC,EAAeX,ICzC9Be,EAAiBnC,EAIjBoC,EAAQ,kBAAS7C,GAAM6B,IAIvBiB,GAAOD,EAIPE,GAAe,sCAAIC,+CAAUA,GAAMxC,OAAOuB,EAAYe,OAItDG,GAAQ,kBAAShF,GAAQ6E,GAAKjB,KAI9BqB,GAAM,kBAAS,mBAAOlD,GAAMuB,EAAIM,GAAOC,MAIvCqB,GAAY,kBAAS,mBAAOF,IAAMC,GAAIrB,GAAOC,MAI7CsB,GAAW,kBAAS,mBAAQ/D,GAAKwC,GAAOwB,KAIxCC,GAAa,kBAAS,mBAAO,mBAAMF,IAASF,GAAIrB,GAAOC,IAAMK,MAI7DoB,GAAW,kBAAS,uCAAIC,+CAASA,GAAKhD,OAAOuB,EAAYF,KAIzD4B,GAAa,kBAAS,uCAAI3B,+CAAQA,GAAItB,OAAOoB,EAAcC,KAI3D6B,GAAW,kBAAS,UAAC5B,MAAK6B,0DAAI,QAAM,uCAAIC,+CACrDA,GAAM3B,IAAItD,EAAOgF,GAAG7B,IAAMtB,OAAO0B,EAAYL,MAIhCgC,GAAc,kBAAS,mBAAO,uCAAID,+CAC/CA,GAAM3B,IAAIzD,EAAMsD,IAAMtB,OAAO6B,EAAeR,MAI/BiC,GAAkB,kBAAS,uCAAIN,+CAC3CA,GAAKhD,OAAO8B,EAAmBQ,GAAKjB,MAIxBkC,GAAc,kBAAS,uCAAIP,+CACxCA,GAAKhD,OAAOJ,EAAW0D,GAAgBjC,gBAAU2B,MAIpCQ,GAAa,kBAAS,uCAAIC,+CAAQA,GAAIzD,OAAOkC,EAAeb,KAI5DqC,GAAc,kBAAS,mBAAO,UAACC,MAAGR,0DAAI,QACnDxD,GAAU+C,GAAIrB,GAAOC,IAAQqC,EAAGR,OAInBS,GAAW,kBAAS,0BAAGD,cAAGR,aAAI,UAAQxD,GAAUyD,GAASO,EAAGR,MC1E5DU,GAAY,cAACC,0DAAO,KAAMlH,yDAAS,EAAGmH,yDAAS,SAASD,OAAMlH,SAAQmH,WAC7EC,GAAU,cAACF,0DAAO,WAAS,eAAClH,0DAAS,QAAM,eAACmH,0DAAS,SACtDD,OAAMlH,SAAQmH,aAINE,GAAa,kBAAQ,mBAAO/D,GAAOgE,GAAM5C,GAAKuC,GAAU1C,EAAM+C,GAAO,EAAG,MAIxEC,GAAW,kBAAQF,MAAapB,IAIhCuB,GAAY,oBAAGL,OAAAA,aAAS,UAAQA,IAIhCM,GAAY,oBAAGzH,OAAAA,aAAS,UAAQA,IAIhC0H,GAAU,kBAAQJ,GAAKnD,IAAII,EAAM+C,KAIjCK,GAAa,kBAAQH,IAAUE,GAAQJ,KAIvCM,GAAa,kBAAQH,IAAUC,GAAQJ,KAIvCO,GAAa,kBAAQ,eAACtB,0DAAI,QAAMoB,IAAWL,GAAQf,IAInDuB,GAAa,kBAAQF,IAAWN,GAAQM,GAAWN,GAAQ,EAAI,GAI/DS,GAAW,cAACT,0DAAO,GAAIzE,6BAAOkE,cAAGR,aAAI,UAChDe,GAAK/D,IAAIwD,EAAGK,GAAQ7C,EAAM+C,IAAOQ,GAAWR,IAAOO,GAAWP,GAAMf,MC3CzDyB,GAAa,SAACvD,MACnBwD,GAAO,QAAPA,QAAQC,0DAAO,GAAInJ,KAAKkH,qBAC3BhD,GAAKpC,EAAQ4D,EAAMN,IAAI8B,KAAQiC,GAAM9E,OAAO6E,EAAMzE,EAAO0E,GAAMjC,KAE5DkC,EAAW,cAACC,0DAAO,GAAIvF,KAAKoD,qBAC/BhD,GAAKgF,EAAK,GAAIlJ,KAAKkH,IAAOmC,GAAMvD,IAAIzD,EAAM6G,EAAK,GAAIlJ,KAAKkH,KACrD7C,OAAOL,EAAWqF,UAEjBvH,GAAQ4D,GAAOrB,OAAO+E,EAAU,GAAItF,OAKhCwF,GAAe,kBAAS,IAAItJ,KAAIgC,EAAQiH,GAAWvD,MCZnD6D,GAAM,kBAAS,UAAC5D,MAGrBuD,GAAO,QAAPA,QAAQX,0DAAOC,GAAS7C,6DAAmBH,EAAM+C,GAAO,YAAxBP,OAAGR,aACvC9F,GAAO0C,EAAQsB,EAAMN,IAAI4C,IAAIO,IAAOlE,OAAO6E,EAAMF,GAAST,GAAQP,EAAGR,YAEhE0B,GAAKV,GAAS7C,MAKV6D,GAAM,kBAAS,UAACC,MACrBC,GAAS,QAATA,YAAkB,UAACC,MACjBxB,GAAOlD,EAAS0E,GAChBC,EAAYxF,EAAQsB,EAAMN,IAAI+C,IAAO0B,YAEpCD,GAAWvF,OAAO2E,GAAUa,KAC3BD,GAAWvF,OAAON,EAAW4F,GAC9BA,EAAOG,KAAO,EAAIJ,EAAOG,GAAOF,GAAUE,UAG5CH,GAAOlB,GAASiB,IAAQ7F,GAAQ6F,OAK5BM,GAAW,kBAAS,UAACN,UAC1BO,GAAaR,GAAI9D,GAAO+D,GACxBQ,EAAerG,GAAQ6F,IACvBS,EAAc1B,GAASiB,GAEtBQ,EAAaH,KAAO,GAAG,IACtB3B,GAAOlD,EAASgF,GAChBL,EAAYlE,EAAMN,IAAI+C,KACgB+B,EAAY9E,IAAI+C,GAA5CgC,IAARlJ,OAAwBmJ,IAARhC,0CAEQwB,iDAAW,oBAA9BS,OAAMC,OACXC,EAAUP,EAAW5E,IAAIiF,KAAWpJ,OAAQ,EAAGmH,OAAQ,GAC7BoC,GAAYD,EAApCtJ,OAAoCsJ,EAApBnC,QAClBqC,GAAStC,OAAMlH,OAAQkJ,EAAS,EAAG/B,OAAQgC,EAAUE,GACrDI,EAASN,EAAUE,EAAWE,EAAWC,EAAOF,CAEjDL,GAAYpK,IAAIuK,OACNM,IAAIN,KACL7F,IAAI6F,EAAMK,yFAIrBR,KAKIU,GAAc,kBAAK,mBAAM,mBAAM1H,GAAKkC,EAAI6D,GAAW4B,IAAIC,IAAKC,MCzD5DC,GAAS,cAACC,0DAAM,IAAK3I,eAASX,oCACzCW,KAAQgD,EAAK3D,GAAQsJ,EAAIpJ,OAAOS,EAAK,KAAO2I,EAAIpJ,OAAOS,EAAK,QACjD4I,GAAa,kBAAQxJ,GAAOC,GAAM0C,OAAO2G,GAAQ,KACjDG,GAAU,kBAAQrJ,GAAQH,GAAM0C,OAAO2G,GAAQ,KAC/CI,GAAU,kBAAQpJ,GAAQL,GAAM0C,OAAO2G,GAAQ,KAC/CK,GAAW,kBAAQjJ,GAAST,GAAM0C,OAAO2G,GAAQ,KAEjDM,GAAa,wBAAcxJ,EAAQyG,GAAMgD,KAAK,cAC9CC,GAAa,yBAAG7F,OAAKW,uBAAoBX,WAAYwF,GAAQ7E,YAE7DmF,GAAkB,yBAAGvE,OAAMZ,4BACvBY,WAAaiE,GAAQ7E,YAEzBoF,GAAc,kBACzBtJ,GAASsD,GAAOrB,OAAO,SAAC4G,IAAsBU,gBAAfzE,OAAMO,aACnCwD,GAAMO,IAAatE,EAAMO,KACzB,oBAESmE,GAAY,eAAGlG,KAAAA,YAAagG,IAAYhG,ICbxCmG,GAAa,QAAbA,YACb5I,GAAG1D,OAAOC,UAAakC,EAAOuB,GAAIoB,OAAOvB,MAAgBgD,IAAI+F,GAAe5I,GAE/D6I,GAAY,kBAAO,mBAAMlI,IAAQ+B,EAAKK,MAEtC+F,GAAmB,kBAAK,mBAAO,mBAC1CnI,GAAMjB,EAAQqE,GAAUgF,GAAGrG,IAAMqB,GAAUgF,GAAGhG,QAEnCiG,GAAa,kBAAK,mBAAO,mBACpCpI,GAAMlB,EAAQoE,GAAIiF,GAAGrG,IAAMoB,GAAIiF,GAAGhG,QAEvBkG,GAAW,kBAAK,mBAAO,oBACjCvG,EAAKK,GAAK3B,OAAOJ,EAAWgI,GAAWD,GAAGrG,GAAKK,OAErCmG,GAAY,kBAAK,mBAAO,mBACnC5H,KAASuH,GAAUnG,GAAKK,IAAKkG,GAASF,GAAGrG,GAAKK,OAEnCoG,GAAW,kBAAK,mBAAO,eAACpG,0DAAKX,EAAM2B,GAAUgF,GAAGrG,UAC7DK,GAAK6B,GAAWD,GAAYoE,GAAGrG,EAAKK,IAAKmG,GAAUH,GAAGrG,GAAKK,IAAOgG,KAErDK,GAAc,SAACL,kBAAKrG,OAAKK,aAASoG,IAASJ,GAAGrG,GAAKK,IAEnDsG,GAAc,kBAAK,mBAChCC,GAAuBP,GAAGrG,GAAKtB,OAAOgI,GAAa1F,GAAKqF,MAE3CQ,GAAe,SAACR,MAAGhE,0DAAK3C,EAAMyB,GAAMkF,UAC/CI,IAASzF,GAAKqF,IAAIhE,MAEPyE,GAAe,kBAAK3F,IAAMkF,GAAG3H,OAAOmI,GAAcR,IAClDU,GAAc,QAAdA,GAAeV,MAAGW,0DAAM,QACpCX,GAAElC,KAAO6C,EAAMD,EAAYF,GAAaR,GAAIW,GAAOhG,GAAKqF"}