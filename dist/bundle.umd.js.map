{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/search.js","../src/strings.js"],"sourcesContent":["import { collections as coll, } from 'turmeric';\n\nconst { addBinMap, mapDiff, spread, addMap, get, flatTuple, removeMap } = coll;\n\nexport const resetNodeBin = (edges, src) => addMap(edges)(src)(new Map);\n\nexport const addNodeBin = (edges, src) =>\n  addMap(edges)(src)(new Map(get(edges)(src)));\n\nexport const addEdgeBin = (edges, [ src, nb, wt = 0 ]) => [\n  [ src, addMap(get(edges)(src))(nb)(wt) ],\n  [ nb, addMap(get(edges)(nb))(src)(wt) ]].reduce(addBinMap, new Map(edges));\n\nexport const removeEdgeBin = (edges, [ src, nb, ]) => [\n  [ src, removeMap(get(edges)(src))(nb) ],\n  [ nb, removeMap(get(edges)(nb))(src) ]].reduce(addBinMap, new Map(edges));\n\nexport const importEdgeBin = (edges, [ src, nbs ]) =>\nspread(mapDiff(nbs)(get(edges)(src))).map(flatTuple(src))\n  .reduce(addEdgeBin, addNodeBin(edges, src));\n\nexport const mergeEdgesBin = (edges, alts) =>\n spread(new Map(alts)).reduce(importEdgeBin, edges);\n","import { collections, } from 'turmeric';\nimport { addEdgeBin, addNodeBin, mergeEdgesBin, removeEdgeBin, resetNodeBin, }\nfrom './reducers';\n\nconst { triple, tuple, get, spreadK, hasK, } = collections;\nconst { addBinMap, removeBin, uniteMap, } = collections;\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elems) => elems.reduce(addNodeBin, copy());\nexport const nodes = edges => spreadK(copy(edges));\nexport const adj = edges => src => copy(get(edges)(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const addNodes = edges => (...srcs) => srcs.reduce(addNodeBin, edges);\nexport const removeNodes = edges => (...srcs) => srcs.reduce(removeBin, copy(edges));\nexport const resetNodes = edges => (...srcs) => srcs.reduce(resetNodeBin, edges);\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(tuple(src)).reduce(removeEdgeBin, edges);\n\nexport const mergeEdges = edges => (...alts) => alts.reduce(mergeEdgesBin, edges);\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [ n, w ]);\n\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric';\n\nconst { addBinSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n\n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n\n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addBinSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n\n  return bVisit(initPath(iNode))(new Set([ iNode ]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([ iNode ]);\n  const solutionSet = initPath(iNode);\n\n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n\n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n\n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n\n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n\n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n","import { collections, } from 'turmeric';\n\nconst { spread, spreadK, spreadV, spreadKV, last } = collections;\n\nexport const redStr = (str = ' ', val, id, coll) =>\n  val === last(coll) ? str.concat(val, ' ') : str.concat(val, ' , ');\nexport const collString = coll => spread(coll).reduce(redStr, '');\nexport const kString = coll => spreadK(coll).reduce(redStr, '');\nexport const vString = coll => spreadV(coll).reduce(redStr, '');\nexport const kvString = coll => spreadKV(coll).reduce(redStr, '');\n\nexport const pathString = path => ` { ${spreadK(path).join(' => ')} }`;\nexport const edgeString = ([ src, nbs ]) => `{ Edge ${src} >> [ ${kString(nbs)} ] } `;\n\nexport const componentString = ([ node, nbs ]) =>\n  `{ component ${node} >> [ ${kString(nbs)} ] } `;\n\nexport const graphString = edges =>\n  spreadKV(edges).reduce((str, [ node, nabes ], id) =>\n    str + edgeString([ node, nabes ]),\n    'Showing Edges\\n');\n\nexport const showGraph = ({ edges }) => (graphString(edges));\n"],"names":["addBinMap","coll","mapDiff","spread","addMap","get","flatTuple","removeMap","resetNodeBin","edges","src","Map","addNodeBin","addEdgeBin","nb","wt","reduce","removeEdgeBin","importEdgeBin","nbs","map","mergeEdgesBin","alts","triple","collections","tuple","spreadK","hasK","removeBin","uniteMap","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","node","isAdjacent","nabe","addNodes","srcs","removeNodes","resetNodes","addEdges","w","nabes","removeEdges","mergeEdges","addNeighbor","n","addEntry","mergeNeighbors","addBinSet","lastK","diff","spreadV","popFirst","pathVal","pred","length","weight","addSrc","path","set","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0","spreadKV","last","redStr","str","val","concat","collString","kString","vString","kvString","pathString","join","edgeString","componentString","graphString","id","showGraph"],"mappings":"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"}