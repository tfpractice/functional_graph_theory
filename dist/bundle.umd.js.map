{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/traversals.js"],"sourcesContent":["import { collections as coll, } from 'turmeric';\n\nconst { spread, addMap, get, spreadK, flatTuple, mapDiff, removeMap } = coll;\n\nexport const set = m => k => v => new Map(m).set(k, v);\n\nexport const nabeMap = edges => src => new Map(get(edges)(src));\nexport const nabes = (edges = new Map) => src => spreadK(nabeMap(edges)(src));\nexport const addSrc = (edges, src) => addMap(edges)(src)(nabeMap(edges)(src));\n\nexport const addEdgeBin = (edges = new Map, [ src, nb, wt = 0 ]) => edges\n  .set(src, addMap(nabeMap(edges)(src))(nb)(wt))\n  .set(nb, addMap(nabeMap(edges)(nb))(src)(wt));\n\nexport const rmEdgeBin = (edges = new Map, [ src, nb, wt = 0 ]) => edges\n  .set(src, removeMap(edges.get(src))(nb))\n  .set(nb, removeMap(edges.get(src))(src));\n\nexport const clearNeighborsBin = (edges = new Map, src) =>\n  edges.set(src, new Map);\n\nexport const importEdgeBin = (edges = new Map, [ src, nbs ] = [ , new Map ]) =>\n   spread(mapDiff(nbs)(edges.get(src))).map(flatTuple(src)).reduce(addEdgeBin, addSrc(edges, src));\n","import { collections, } from 'turmeric';\nimport { addEdgeBin, addSrc, clearNeighborsBin, importEdgeBin, rmEdgeBin, } from './reducers';\n\nconst { spread, triple, spreadK, hasK, } = collections;\nconst { asMap, addBinMap, removeBin, uniteMap, } = collections;\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elements) => elements.reduce(addSrc, spawn());\nexport const nodes = edges => spreadK(new Map(edges));\nexport const adj = edges => src => new Map(edges.get(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const addNodes = edges => (...srcs) => srcs.reduce(addSrc, edges);\nexport const removeNodes = edges => (...srcs) => srcs.reduce(removeBin, edges);\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(triple(0)(src)).reduce(rmEdgeBin, edges);\n\nexport const mergeEdges = (edges = new Map) => (altEdges = new Map) =>\n new Map(spread(altEdges).reduce(importEdgeBin, edges));\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [ n, w ]);\n\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n\nexport const clearNeighbors = (edges = new Map) => (...srcs) =>\n  srcs.reduce(clearNeighborsBin, edges);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric';\n\nconst { addSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n\n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n\n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n\n  return bVisit(initPath(iNode))(new Set([ iNode ]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([ iNode ]);\n  const solutionSet = initPath(iNode);\n\n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n\n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n\n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n\n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n\n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n"],"names":["spread","coll","addMap","get","spreadK","flatTuple","mapDiff","removeMap","set","Map","m","k","v","nabeMap","edges","src","nabes","addSrc","addEdgeBin","nb","wt","rmEdgeBin","clearNeighborsBin","importEdgeBin","nbs","map","reduce","collections","triple","hasK","addBinMap","removeBin","uniteMap","spawn","copy","fromElements","elements","nodes","adj","neighbors","contains","node","isAdjacent","nabe","addNodes","srcs","removeNodes","addEdges","w","removeEdges","mergeEdges","altEdges","addNeighbor","n","addEntry","clearNeighbors","mergeNeighbors","addSet","lastK","diff","spreadV","popFirst","tuple","pathVal","pred","length","weight","path","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0"],"mappings":"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"}