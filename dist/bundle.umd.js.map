{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/traversals.js"],"sourcesContent":["import { collections, } from 'turmeric';\n\nconst { spread, addMap, get, flatTuple, mapDiff, removeMap } = collections;\n\nexport const nabeMap = edges => src => new Map(get(edges)(src));\nexport const addSrc = (edges, src) => addMap(edges)(src)(nabeMap(edges)(src));\n\nexport const addEdgeBin = (edges, [ src, nb, wt = 0 ]) => new Map(edges)\n  .set(src, addMap(get(edges)(src))(nb)(wt))\n  .set(nb, addMap(get(edges)(nb))(src)(wt));\n\nexport const rmEdgeBin = (edges, [ src, nb, ]) => new Map(edges)\n  .set(src, removeMap(get(edges)(src))(nb))\n  .set(nb, removeMap(get(edges)(src))(src));\n\nexport const clearNeighborsBin = (edges, src) => addMap(edges)(src)(new Map);\n\nexport const importEdgeBin = (edges, [ src, nbs ]) =>\n   spread(mapDiff(nbs)(get(edges)(src))).map(flatTuple(src))\n     .reduce(addEdgeBin, addSrc(edges, src));\n","import { collections, } from 'turmeric';\nimport { addEdgeBin, addSrc, clearNeighborsBin, importEdgeBin, rmEdgeBin, }\nfrom './reducers';\n\nconst { spread, triple, get, spreadK, hasK, } = collections;\nconst { addBinMap, removeBin, uniteMap, } = collections;\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elems) => elems.reduce(addSrc, copy());\nexport const nodes = edges => spreadK(copy(edges));\nexport const adj = edges => src => copy(get(edges)(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const addNodes = edges => (...srcs) => srcs.reduce(addSrc, edges);\nexport const removeNodes = edges => (...srcs) => srcs.reduce(removeBin, copy(edges));\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(triple(0)(src)).reduce(rmEdgeBin, edges);\n\nexport const mergeEdgesBin = (edges, alts) =>\n  spread(alts).reduce(importEdgeBin, edges);\n\nexport const mergeEdges = edges => (...alts) =>\n   alts.reduce(mergeEdgesBin, edges);\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [ n, w ]);\n\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n\nexport const clearNeighbors = edges => (...srcs) =>\n  srcs.reduce(clearNeighborsBin, edges);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric';\n\nconst { addBinSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n\n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n\n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addBinSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n\n  return bVisit(initPath(iNode))(new Set([ iNode ]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([ iNode ]);\n  const solutionSet = initPath(iNode);\n\n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n\n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n\n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n\n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n\n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n"],"names":["spread","collections","addMap","get","flatTuple","mapDiff","removeMap","nabeMap","Map","edges","src","addSrc","addEdgeBin","nb","wt","set","rmEdgeBin","clearNeighborsBin","importEdgeBin","nbs","map","reduce","triple","spreadK","hasK","addBinMap","removeBin","uniteMap","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","node","isAdjacent","nabe","addNodes","srcs","removeNodes","addEdges","w","nabes","removeEdges","mergeEdgesBin","alts","mergeEdges","addNeighbor","n","addEntry","clearNeighbors","mergeNeighbors","addBinSet","lastK","diff","spreadV","popFirst","tuple","pathVal","pred","length","weight","path","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0"],"mappings":"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"}