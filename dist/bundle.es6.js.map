{"version":3,"file":"bundle.es6.js","sources":["../src/components.js","../src/reducers.js","../src/graph.js","../src/contract.js","../src/path.js","../src/search.js","../src/show.js"],"sourcesContent":["import { addBinMap, addSet, diff, spreadK, spreadV, tuple, }\n from 'fenugreek-collections';\n\n // **components** `::  Map<edge> -> Map<component>`\n // maps each node to a set of connected nodes\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, addSet(comp)(node));\n     \n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n  \n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\n// **componentSet** `::  Map<edge> -> Set<component>`\n// partitions an edgelist into sets of connected nodes\nexport const componentSet = edges => new Set(spreadV(components(edges)));\n","import { addBinMap, addMap, append, asMap, flatTuple,\n  get, mapDiff, removeMap, spread, spreadK, } from 'fenugreek-collections';\n\n// **resetNodeBin** `:: ( Map<edge>, node ) -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const resetNodeBin = (edges, src) => addMap(edges)(src)(asMap());\n\n// **addNodeBin** `:: ( Map<edge>, node ) -> Map<edge>`\n// adds a node:adjacency list pair to an edgelist\nexport const addNodeBin = (edges, src) => addMap(edges)(src)(get(edges)(src));\n\n// **neighborPairs** `:: ( Map<edge>, node ) -> [ [node, node] ]`\n// returns an array of [node, neigbor] pairs from an edgelist\nexport const neighborPairs = edges => src =>\nspreadK(get(edges)(src)).map(append(src));\n\n// **addEdgeBin** `:: ( Map<edge>, [node, node, Number] ) -> Map<edge>`\n// add a node:Map<{node: Number}> entry to an edgelist\nexport const addEdgeBin = (edges, [ src, nb, wt = 0 ]) => [\n  [ src, addMap(get(edges)(src))(nb)(wt) ],\n  [ nb, addMap(get(edges)(nb))(src)(wt) ]].reduce(addBinMap, asMap(edges));\n\n// **removeEdgeBin** `:: ( Map<edge>, [node, node] ) -> Map<edge>`\n// removes a {node:Map<{node: Number}>} entry from an edgelist\nexport const removeEdgeBin = (edges, [ src, nb, ]) => [\n  [ src, removeMap(get(edges)(src))(nb) ],\n  [ nb, removeMap(get(edges)(nb))(src) ]].reduce(addBinMap, asMap(edges));\n\n// **disconnectNodeBin** `:: ( Map<edge>, node ) -> Map<edge>`\n// removes all edges connected to a node\nexport const disconnectNodeBin = (edges, src) =>\n  neighborPairs(edges)(src).reduce(removeEdgeBin, asMap(edges));\n\n// **removeNodeBin** `:: ( Map<edge>, node ) -> Map<edge>`\n// isolates a node and removes it from edgelist\nexport const removeNodeBin = (edges, src) =>\nremoveMap(disconnectNodeBin(edges, src))(src);\n\n// **importEdgeBin** `:: ( Map<edge>, [node, [node: Number]] ) -> Map<edge>`\n// appends a node and all of its neighbors to an edgelist\nexport const importEdgeBin = (edges, [ src, nbs ]) =>\nspread(mapDiff(nbs)(get(edges)(src))).map(flatTuple(src))\n  .reduce(addEdgeBin, addNodeBin(edges, src));\n\n// **mergeEdgesBin** `:: ( Map<edge>, Map<edge>, ) -> Map<edge>`\n// combines two Edge maps\nexport const mergeEdgesBin = (edges, alts) =>\n spread(asMap(alts)).reduce(importEdgeBin, edges);\n","import { addBinMap, asMap, get, hasK, removeBin, spreadK, triple, tuple, uniteMap, } from 'fenugreek-collections';\nimport { addEdgeBin, addNodeBin, disconnectNodeBin, mergeEdgesBin, removeEdgeBin, resetNodeBin, }\nfrom './reducers';\n\n// **mergeNeighbors** `::  Map<edge> ->  node  -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const mergeNeighbors = uniteMap;\n\n// **spawn** `::  Map<edge> -> Map<edge>`\n// returns a new Edgelist\nexport const spawn = edges => asMap(edges);\n\n// **copy** `::  Map<edge> -> Map<edge>`\n// creates a copy of a Edgelist\nexport const copy = spawn;\n\n// **fromElements** `::  Map<edge> -> ...node  -> Map<edge>`\n// adds  {node: adjacencyList} pairs ot an Edgelist\nexport const fromElements = (...elems) => elems.reduce(addNodeBin, copy());\n\n// **nodes** `::  Map<edge> ->  [node]\n// returns an array of the nodes\nexport const nodes = edges => spreadK(copy(edges));\n\n// **adj** `::  Map<edge> ->  node  -> Map<{node: Number}>`\n// returns the nodes adjacency list\nexport const adj = edges => src => asMap(get(edges)(src));\n\n// **neighbors** `::  Map<edge> ->  node  -> [node]`\n// returns the nodes neighbors\nexport const neighbors = edges => src => nodes(adj(edges)(src));\n\n// **contains** `::  Map<edge> ->  node  -> Boolean`\n// checks for the presence of a node in an edgelist\nexport const contains = edges => node => hasK(edges)(node);\n\n// **isAdjacent** `::  Map<edge> ->  node  -> Map<edge>`\n// checks for the presence of a neighbor in a node's adjacency list\nexport const isAdjacent = edges => src => nb => contains(adj(edges)(src))(nb);\n\n// **addNodes** `::  Map<edge> ->  ...node  -> Map<edge>`\n// adds nodes to an Edgelist\nexport const addNodes = edges => (...srcs) => srcs.reduce(addNodeBin, edges);\n\n// **resetNodes** `::  Map<edge> ->  ...node  -> Map<edge>`\n// resets the adjacency lists of given nodes to an empty map\nexport const resetNodes = edges => (...src) => src.reduce(resetNodeBin, edges);\n\n// **addEdges** `::  Map<edge> ->  (node, Number) -> ...node  -> Map<edge>`\n// creates edges between a node and multiple other nodes\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\nnabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\n// **removeEdges** `::  Map<edge> ->  node -> ...node  -> Map<edge>`\n// removes edges between a node and select other nodes\nexport const removeEdges = edges => src => (...nabes) =>\nnabes.map(tuple(src)).reduce(removeEdgeBin, edges);\n\n// **disconnectNodes** `:: Map<edge> ->  ...node  -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const disconnectNodes = edges => (...srcs) =>\n srcs.reduce(disconnectNodeBin, copy(edges));\n\n // **removeNodes** `::  Map<edge> ->  ...node  -> Map<edge>`\n // resets the nodes adjacency list to an empty map\nexport const removeNodes = edges => (...srcs) =>\nsrcs.reduce(removeBin, disconnectNodes(edges)(...srcs));\n\n// **mergeEdges** `::  Map<edge> -> ...{node:adjacency} -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const mergeEdges = edges => (...alt) => alt.reduce(mergeEdgesBin, edges);\n\n// **addNeighbor** `::  Map<edge> -> ...{node:adjacency} -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const addNeighbor = edges => src => (n, w = 0) =>\naddBinMap(adj(edges)(src), [ n, w ]);\n\n// **addEntry** `::  Map<{node:Number}> ->  [node, Number]  -> Map<edge>`\n// resets the nodes adjacency list to an empty map\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n","import { addMap, asMap, asSet, first, flatten, flattenBin, isIterable,\n   removeBin, spread, } from 'fenugreek-collections';\nimport { adj, copy, mergeEdges, neighbors, nodes, removeNodes, } from './graph';\nimport * as reducers from './reducers';\n\nexport const autoSpread = el =>\nisIterable(el) ? (spread(el).reduce(flattenBin, []).map(autoSpread)) : el;\n\nexport const superNode = src => nb => asSet([ src, nb ]);\n\nexport const combineNeighbors = g => src => nb =>\n  asSet(flatten(neighbors(g)(src))(neighbors(g)(nb)));\n\nexport const combineAdj = g => src => nb =>\n  asMap(flatten(adj(g)(src))(adj(g)(nb)));\n\nexport const superAdj = g => src => nb =>\n [ src, nb ].reduce(removeBin, combineAdj(g)(src)(nb));\n\nexport const superEdge = g => src => nb =>\n  addMap()(superNode(src)(nb))(superAdj(g)(src)(nb));\n\nexport const contract = g => src => (nb = first(neighbors(g)(src))) =>\nnb ? mergeEdges(removeNodes(g)(src, nb))(superEdge(g)(src)(nb)) : g;\n\nexport const contractBin = (g, [ src, nb ]) => contract(g)(src)(nb);\n\nexport const contractSrc = g => src =>\nreducers.neighborPairs(g)(src).reduce(contractBin, copy(g));\n\nexport const contractNext = (g, n = (first(nodes(g)))) =>\n  contract(copy(g))(n)();\n\nexport const contractAuto = g => nodes(g).reduce(contractNext, g);\nexport const contractMin = (g, min = 2) =>\n g.size > min ? contractMin(contractNext(g), min) : copy(g);\n","import { addMap, lastK, } from 'fenugreek-collections';\n\n// **pathEntry** `:: ( node, Number, Number ) -> {pred, length, weight}`\n// returns an object with pred, weight, and length properties\nexport const pathEntry = (pred = null, length = 1, weight = 0) => ({ pred, length, weight });\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n  \n// **addSrc** `:: Map<pathEntry> -> node ->  Map<pathEntry>`\n// adds a {node:{pred, weight, length}} entry to a  path\nexport const appendPath = path => src => addMap(path)(src)(pathEntry(lastK(path), 1, 0));\n\n// **initPath** `:: node -> Map<pathEntry>`\n// initializes a new path given a source node\nexport const initPath = node => appendPath()(node);\n\n// **getWeight** `:: {weight:Number} -> Number`\n// returns an object with pred, weight, and length properties\nexport const getWeight = ({ weight = 0 }) => weight;\n\n// **getLength** `:: {length:Number} -> Number`\n// returns an object with pred, weight, and length properties\nexport const getLength = ({ length = 1 }) => length;\n\n// **lastVal** `:: Map<pathEntry> -> {pred, length, weight}`\n// returns the last entry in the path\nexport const lastVal = path => path.get(lastK(path));\n\n// **lastWeight** `:: Map<pathEntry> -> Number`\n// returns the last weight in the path\nexport const lastWeight = path => getWeight(lastVal(path));\n\n// **lastLength** `:: Map<pathEntry> -> Number`\n// returns the last length in the path\nexport const lastLength = path => getLength(lastVal(path));\n\n// **nextWeight** `:: Map<pathEntry> -> Number -> Number`\n// returns an object with pred, weight, and length properties\nexport const nextWeight = path => (w = 0) => lastWeight(path) + w;\n\n// **nextLength** `:: Map<pathEntry> -> Number -> Number`\n// returns an object with pred, weight, and length properties\nexport const nextLength = path => lastLength(path) ? lastLength(path) + 1 : 1;\n\n// **nextPath** `:: (Map<pathEntry>, [node, Number]) -> Map<pathEntry> `\n// returns an object with pred, weight, and length properties\nexport const nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextLength(path))(nextWeight(path)(w)));\n","import { addBinSet, asSet, get, hasK, lastK, mapDiff, popFirst, spread, spreadK, } from 'fenugreek-collections';\nimport { initPath, nextPath, } from './path';\nimport { components, } from './components';\n\n// **dfs** `:: Map<edge> -> node -> Map<pathEntry>`\n// depth first traversal\nexport const dfs = edges => (src) => {\n  // >**dfs.trav** `:: Map<pathEntry> -> [node, w] -> Map<pathEntry>`\n  // >depth first traversal\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n  \n  return trav(initPath(src));\n};\n\n// **bfs** `:: Map<edge> -> node -> Map<pathEntry>`\n// breadth first traversal\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n    \n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addBinSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n  \n  return bVisit(initPath(iNode))(asSet([ iNode ]));\n};\n\n// **dijkstra** `:: Map<edge> -> node -> Map<pathEntry>`\n// finds shortest paths from a source node to all node reachable from that node\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = asSet([ iNode ]);\n  const solutionSet = initPath(iNode);\n  \n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n    \n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n      \n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n  return solutionSet;\n};\n\n// **pathBetween** `:: Map<edge> -> node -> node -> Boolean`\n// checks for a path between two nodes\nexport const pathBetween = e => n0 => n1 => hasK(get(components(e))(n0))(n1);\n","import { last, spread, spreadK, spreadKV, spreadV, } from 'fenugreek-collections';\n\nexport const redStr = (str = ' ', val, id, coll) =>\n  val === last(coll) ? str.concat(val, ' ') : str.concat(val, ' , ');\nexport const collString = coll => spread(coll).reduce(redStr, '');\nexport const kString = coll => spreadK(coll).reduce(redStr, '');\nexport const vString = coll => spreadV(coll).reduce(redStr, '');\nexport const kvString = coll => spreadKV(coll).reduce(redStr, '');\n\nexport const pathString = path => ` { ${spreadK(path).join(' => ')} }`;\nexport const edgeString = ([src, nbs]) => `{ Edge ${src} >> [ ${kString(nbs)} ] } `;\n\nexport const componentString = ([node, nbs]) =>\n  `{ component ${node} >> [ ${kString(nbs)} ] } `;\n\nexport const graphString = edges =>\n  spreadKV(edges).reduce((str, [node, nabes], id) =>\n    str + edgeString([node, nabes]),\n    'Showing Edges\\n');\n\nexport const showGraph = ({ edges }) => (graphString(edges));\n"],"names":["components","edges","trav","comp","Set","node","diff","spreadK","get","reduce","addSet","visitMap","mMap","Map","map","tuple","addBinMap","componentSet","spreadV","resetNodeBin","src","addMap","asMap","addNodeBin","neighborPairs","append","addEdgeBin","nb","wt","removeEdgeBin","removeMap","disconnectNodeBin","importEdgeBin","nbs","spread","mapDiff","flatTuple","mergeEdgesBin","alts","mergeNeighbors","uniteMap","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","hasK","isAdjacent","addNodes","srcs","resetNodes","addEdges","w","nabes","triple","removeEdges","disconnectNodes","removeNodes","removeBin","mergeEdges","alt","addNeighbor","n","addEntry","autoSpread","isIterable","el","flattenBin","superNode","asSet","combineNeighbors","flatten","g","combineAdj","superAdj","superEdge","contract","first","contractBin","contractSrc","reducers","contractNext","contractAuto","contractMin","min","size","pathEntry","pred","length","weight","pathVal","appendPath","path","lastK","initPath","getWeight","getLength","lastVal","lastWeight","lastLength","nextWeight","nextLength","nextPath","set","dfs","bfs","iNode","bVisit","bQueue","popFirst","nextNabes","bPath","addBinSet","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nabe","nWeight","prevMap","rCount","rWeight","dMap","sMap","has","add","pathBetween","e","n0","n1","redStr","str","val","id","coll","last","concat","collString","kString","vString","kvString","spreadKV","pathString","join","edgeString","componentString","graphString","showGraph"],"mappings":"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"}