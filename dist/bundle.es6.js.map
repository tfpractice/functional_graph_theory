{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/search.js"],"sourcesContent":["import { collections as coll, } from 'turmeric';\nconst { addBinMap, mapDiff, spread, addMap, get, flatTuple, removeMap } = coll;\n\nexport const resetNodeBin = (edges, src) => addMap(edges)(src)(new Map);\n\nexport const addNodeBin = (edges, src) =>\n  addMap(edges)(src)(new Map(get(edges)(src)));\n\nexport const addEdgeBin = (edges, [ src, nb, wt = 0 ]) => [\n  [ src, addMap(get(edges)(src))(nb)(wt) ],\n  [ nb, addMap(get(edges)(nb))(src)(wt) ], ].reduce(addBinMap, new Map(edges));\n\nexport const removeEdgeBin = (edges, [ src, nb, ]) => [\n  [ src, removeMap(get(edges)(src))(nb) ],\n  [ nb, removeMap(get(edges)(nb))(src) ], ].reduce(addBinMap, new Map(edges));\n\nexport const importEdgeBin = (edges, [ src, nbs ]) =>\nspread(mapDiff(nbs)(get(edges)(src))).map(flatTuple(src))\n  .reduce(addEdgeBin, addNodeBin(edges, src));\n\nexport const mergeEdgesBin = (edges, alts) =>\n spread(new Map(alts)).reduce(importEdgeBin, edges);\n","import { collections, } from 'turmeric';\nimport { addEdgeBin, addNodeBin, importEdgeBin, mergeEdgesBin, removeEdgeBin, resetNodeBin, }\nfrom './reducers';\n\nconst { triple, tuple, get, spreadK, hasK, } = collections;\nconst { addBinMap, removeBin, uniteMap, } = collections;\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elems) => elems.reduce(addNodeBin, copy());\nexport const nodes = edges => spreadK(copy(edges));\nexport const adj = edges => src => copy(get(edges)(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const addNodes = edges => (...srcs) => srcs.reduce(addNodeBin, edges);\nexport const removeNodes = edges => (...srcs) => srcs.reduce(removeBin, copy(edges));\nexport const resetNodes = edges => (...srcs) => srcs.reduce(resetNodeBin, edges);\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(tuple(src)).reduce(removeEdgeBin, edges);\n\nexport const mergeEdges = edges => (...alts) => alts.reduce(mergeEdgesBin, edges);\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [ n, w ]);\n\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric';\n\nconst { addBinSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n\n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n\n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addBinSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n\n  return bVisit(initPath(iNode))(new Set([ iNode ]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([ iNode ]);\n  const solutionSet = initPath(iNode);\n\n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n\n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n\n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n\n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n\n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n"],"names":["addBinMap","coll","mapDiff","spread","addMap","get","flatTuple","removeMap","resetNodeBin","edges","src","Map","addNodeBin","addEdgeBin","nb","wt","reduce","removeEdgeBin","importEdgeBin","nbs","map","mergeEdgesBin","alts","triple","collections","tuple","spreadK","hasK","removeBin","uniteMap","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","node","isAdjacent","nabe","addNodes","srcs","removeNodes","resetNodes","addEdges","w","nabes","removeEdges","mergeEdges","addNeighbor","n","addEntry","mergeNeighbors","addBinSet","lastK","diff","spreadV","popFirst","pathVal","pred","length","weight","addSrc","path","set","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rCount","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0"],"mappings":"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"}