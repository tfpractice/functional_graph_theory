{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/search.js","../src/strings.js","../src/operations.js"],"sourcesContent":["import { collections as coll, } from 'turmeric-utils';\n\nconst { addBinMap, mapDiff, spread, addMap, get, flatTuple, removeMap } = coll;\n\nexport const resetNodeBin = (edges, src) => addMap(edges)(src)(new Map);\n\nexport const addNodeBin = (edges, src) =>\n  addMap(edges)(src)(new Map(get(edges)(src)));\n\nexport const removeNodeBin = (edges, src) =>\n    addMap(edges)(src)(new Map(get(edges)(src)));\n\nexport const addEdgeBin = (edges, [ src, nb, wt = 0 ]) => [\n  [ src, addMap(get(edges)(src))(nb)(wt) ],\n  [ nb, addMap(get(edges)(nb))(src)(wt) ]].reduce(addBinMap, new Map(edges));\n\nexport const removeEdgeBin = (edges, [ src, nb, ]) => [\n  [ src, removeMap(get(edges)(src))(nb) ],\n  [ nb, removeMap(get(edges)(nb))(src) ]].reduce(addBinMap, new Map(edges));\n\nexport const importEdgeBin = (edges, [ src, nbs ]) =>\nspread(mapDiff(nbs)(get(edges)(src))).map(flatTuple(src))\n  .reduce(addEdgeBin, addNodeBin(edges, src));\n\nexport const mergeEdgesBin = (edges, alts) =>\n spread(new Map(alts)).reduce(importEdgeBin, edges);\n","import { collections, } from 'turmeric-utils';\nimport { addEdgeBin, addNodeBin, mergeEdgesBin, removeEdgeBin, resetNodeBin, }\nfrom './reducers';\n\nconst { triple, tuple, get, flatten, spreadK, hasK, } = collections;\nconst { addBinMap, removeBin, uniteMap, } = collections;\nconst flattenBin = (a = [], b = []) => flatten(a)(b);\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elems) => elems.reduce(addNodeBin, copy());\nexport const nodes = edges => spreadK(copy(edges));\nexport const adj = edges => src => copy(get(edges)(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const kvPair = k => v => [k, v];\n\nexport const nodeNeighbors = edges => src => neighbors(edges)(src).map(kvPair(src));\nexport const addNodes = edges => (...srcs) => srcs.reduce(addNodeBin, edges);\n\n  //  srcs.map(nodeNeighbors(edges))\n  //    .reduce(flattenBin, [])\n  //    .reduce(removeEdgeBin, copy(edges));\nexport const resetNodes = edges => (...srcs) => srcs.reduce(resetNodeBin, edges);\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(tuple(src)).reduce(removeEdgeBin, edges);\n\nexport const disconnectNodeBin = (edges, src) =>\n      removeEdges(edges)(src)(...neighbors(edges)(src));\n\nexport const disconnectNodes = edges => (...srcs) =>\n     srcs.reduce(disconnectNodeBin, copy(edges));\n\nexport const removeNodes = edges => (...srcs) =>\n    srcs.reduce(removeBin, disconnectNodes(edges)(...srcs));\n\nexport const mergeEdges = edges => (...alts) => alts.reduce(mergeEdgesBin, edges);\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [n, w]);\n\nexport const addEntry = nabes => ([n, w = 0]) => addBinMap(nabes, [n, w]);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric-utils';\n\nconst { addBinSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n\n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n\n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addBinSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n\n  return bVisit(initPath(iNode))(new Set([ iNode ]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([ iNode ]);\n  const solutionSet = initPath(iNode);\n\n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n\n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n\n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n\n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n\n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n","import { collections, } from 'turmeric-utils';\n\nconst { spread, spreadK, spreadV, spreadKV, last } = collections;\n\nexport const redStr = (str = ' ', val, id, coll) =>\n  val === last(coll) ? str.concat(val, ' ') : str.concat(val, ' , ');\nexport const collString = coll => spread(coll).reduce(redStr, '');\nexport const kString = coll => spreadK(coll).reduce(redStr, '');\nexport const vString = coll => spreadV(coll).reduce(redStr, '');\nexport const kvString = coll => spreadKV(coll).reduce(redStr, '');\n\nexport const pathString = path => ` { ${spreadK(path).join(' => ')} }`;\nexport const edgeString = ([ src, nbs ]) => `{ Edge ${src} >> [ ${kString(nbs)} ] } `;\n\nexport const componentString = ([ node, nbs ]) =>\n  `{ component ${node} >> [ ${kString(nbs)} ] } `;\n\nexport const graphString = edges =>\n  spreadKV(edges).reduce((str, [ node, nabes ], id) =>\n    str + edgeString([ node, nabes ]),\n    'Showing Edges\\n');\n\nexport const showGraph = ({ edges }) => (graphString(edges));\n","import { collections, } from 'turmeric-utils';\nimport { addEdges, addEntry, addNeighbor, addNodes, adj, contains, copy,\n  fromElements, isAdjacent, mergeEdges, mergeNeighbors, neighbors, nodeNeighbors,\n  nodes, removeEdges, removeNodes, resetNodes, spawn, } from './graph';\nimport { graphString, } from './strings';\nimport * as reducers from './reducers';\n\nconst { flatten, spread, first, removeBin, get, addMap } = collections;\n\nconst flattenBin = (a = [], b = []) => flatten(a)(b);\n\nexport const autoSpread = el =>\nel[Symbol.iterator] ? (spread(el).reduce(flattenBin, []).map(autoSpread)) : el;\n\nexport const superNode = src => nb => new Set([ src, nb ]);\n\nexport const combineNeighbors = g => src => nb =>\n  new Set(flatten(neighbors(g)(src))(neighbors(g)(nb)));\n\nexport const combineAdj = g => src => nb =>\n  new Map(flatten(adj(g)(src))(adj(g)(nb)));\n\nexport const superAdj = g => src => nb =>\n [ src, nb ].reduce(removeBin, combineAdj(g)(src)(nb));\n\nexport const superEdge = g => src => nb =>\n  addMap()(superNode(src)(nb))(superAdj(g)(src)(nb));\n\nexport const contract = g => src => (nb = first(neighbors(g)(src))) =>\nnb ? mergeEdges(removeNodes(g)(src, nb))(superEdge(g)(src)(nb)) : g;\n\nexport const contractBin = (g, [ src, nb ]) => contract(g)(src)(nb);\n\nexport const contractSrc = g => src =>\nnodeNeighbors(g)(src).reduce(contractBin, copy(g));\n\nexport const contractNext = (g, n = (first(nodes(g)))) =>\n  contract(copy(g))(n)();\n\nexport const contractAuto = g => nodes(g).reduce(contractNext, g);\nexport const contractMin = (g, min = 2) =>\n g.size > min ? contractMin(contractNext(g), min) : copy(g);\n"],"names":["addBinMap","coll","mapDiff","spread","addMap","get","flatTuple","removeMap","resetNodeBin","edges","src","Map","addNodeBin","removeNodeBin","addEdgeBin","nb","wt","reduce","removeEdgeBin","importEdgeBin","nbs","map","mergeEdgesBin","alts","triple","collections","tuple","spreadK","hasK","removeBin","uniteMap","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","node","isAdjacent","nabe","kvPair","k","v","nodeNeighbors","addNodes","srcs","resetNodes","addEdges","w","nabes","removeEdges","disconnectNodeBin","disconnectNodes","removeNodes","mergeEdges","addNeighbor","n","addEntry","mergeNeighbors","addBinSet","lastK","diff","spreadV","popFirst","pathVal","pred","length","weight","addSrc","path","set","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rCount","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0","spreadKV","last","redStr","str","val","id","concat","collString","kString","vString","kvString","pathString","join","edgeString","componentString","graphString","showGraph","flatten","first","flattenBin","a","b","autoSpread","el","Symbol","iterator","superNode","combineNeighbors","g","combineAdj","superAdj","superEdge","contract","contractBin","contractSrc","contractNext","contractAuto","contractMin","min"],"mappings":"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"}