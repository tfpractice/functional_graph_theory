{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/traversals.js"],"sourcesContent":["import { collections, } from 'turmeric';\n\nconst { spread, addMap, get, flatTuple, mapDiff, removeMap } = collections;\n\nexport const nabeMap = edges => src => new Map(get(edges)(src));\nexport const addSrc = (edges, src) => addMap(edges)(src)(nabeMap(edges)(src));\n\nexport const addEdgeBin = (edges = new Map, [ src, nb, wt = 0 ]) =>\n\n  // console.log('nabeMap(edges)(src)', nabeMap(edges)(src));\n  // console.log('addMap(nabeMap(edges)(src))(nb)(wt)', addMap(nabeMap(edges)(src))(nb)(wt));\n  // console.log('edges.get(src)', edges.get(src));\n   new Map(edges)\n     .set(src, addMap(get(edges)(src))(nb)(wt))\n     .set(nb, addMap(get(edges)(nb))(src)(wt))\n\n  // const rVal2 = (edges)\n  //     .set(src, addMap(nabeMap(edges)(src))(nb)(wt))\n  //     .set(nb, addMap(nabeMap(edges)(nb))(src)(wt));\n\n    // addMap(edges)(src)(addMap(nabeMap(edges)(src))(nb)(wt))\n  //\n  // console.log('rVal', rVal);\n  // console.log('rVal2', rVal2);\n  // console.log('mapDiff(rVal(rVal2))', mapDiff(rVal)(rVal2));\n  // return rVal;\n;\n\nexport const rmEdgeBin = (edges, [ src, nb, ]) => new Map(edges)\n  .set(src, removeMap(get(edges)(src))(nb))\n  .set(nb, removeMap(get(edges)(src))(src));\n\nexport const clearNeighborsBin = (edges, src) => addMap(edges)(src)(new Map);\n\nexport const importEdgeBin = (edges, [ src, nbs ]) =>\n   spread(mapDiff(nbs)(get(edges)(src))).map(flatTuple(src))\n     .reduce(addEdgeBin, addSrc(edges, src));\n","import { collections, } from 'turmeric';\nimport { addEdgeBin, addSrc, clearNeighborsBin, importEdgeBin, rmEdgeBin, }\nfrom './reducers';\n\nconst { spread, triple, get, spreadK, hasK, } = collections;\nconst { addBinMap, removeBin, uniteMap, } = collections;\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elems) => elems.reduce(addSrc, copy());\nexport const nodes = edges => spreadK(copy(edges));\nexport const adj = edges => src => copy(get(edges)(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const addNodes = edges => (...srcs) => srcs.reduce(addSrc, edges);\nexport const removeNodes = edges => (...srcs) => srcs.reduce(removeBin, copy(edges));\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(triple(0)(src)).reduce(rmEdgeBin, edges);\n\nexport const mergeEdgesBin = (edges, alts) =>\n  spread(alts).reduce(importEdgeBin, edges);\n\nexport const mergeEdges = edges => (...alts) =>\n   alts.reduce(mergeEdgesBin, edges);\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [ n, w ]);\n\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n\nexport const clearNeighbors = edges => (...srcs) =>\n  srcs.reduce(clearNeighborsBin, edges);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric';\n\nconst { addBinSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n\n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n\n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addBinSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n\n  return bVisit(initPath(iNode))(new Set([ iNode ]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([ iNode ]);\n  const solutionSet = initPath(iNode);\n\n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n\n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n\n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n\n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n\n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n"],"names":["spread","collections","addMap","get","flatTuple","mapDiff","removeMap","nabeMap","Map","edges","src","addSrc","addEdgeBin","nb","wt","set","rmEdgeBin","clearNeighborsBin","importEdgeBin","nbs","map","reduce","triple","spreadK","hasK","addBinMap","removeBin","uniteMap","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","node","isAdjacent","nabe","addNodes","srcs","removeNodes","addEdges","w","nabes","removeEdges","mergeEdgesBin","alts","mergeEdges","addNeighbor","n","addEntry","clearNeighbors","mergeNeighbors","addBinSet","lastK","diff","spreadV","popFirst","tuple","pathVal","pred","length","weight","path","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rCount","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0"],"mappings":"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"}