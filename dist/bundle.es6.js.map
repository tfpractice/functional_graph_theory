{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/traversals.js","../src/index.js"],"sourcesContent":["import { collections, } from 'turmeric';\n\nconst { spread, tuple, addMap, get, spreadK, flatTuple, } = collections;\nconst { uniteMap, mapDiff, mapUnion, diff } = collections;\nconst { asMap, addBinMap, removeBinTuple, removeMap, removeBin } = collections;\n\nexport const set = m => k => v => new Map(m).set(k, v);\n\nexport const nabeMap = edges => src => new Map(get(edges)(src));\nexport const nabes = (edges = new Map) => src => spreadK(nabeMap(edges)(src));\nexport const addSrc = (edges, src) => addMap(edges)(src)(nabeMap(edges)(src));\n\nexport const addEdgeBin = (edges = new Map, [src, nb, wt = 0]) => edges\n  .set(src, addMap(nabeMap(edges)(src))(nb)(wt))\n  .set(nb, addMap(nabeMap(edges)(nb))(src)(wt));\n\nexport const rmEdgeBin = (edges = new Map, [src, nb, wt = 0]) => edges\n  .set(src, removeMap(edges.get(src))(nb))\n  .set(nb, removeMap(edges.get(src))(src));\n\nexport const clearNeighborsBin = (edges = new Map, src) =>\n  edges.set(src, new Map);\n\nexport const importEdgeBin = (edges = new Map, [src, nbs] = [, new Map]) =>\n   spread(mapDiff(nbs)(edges.get(src))).map(flatTuple(src)).reduce(addEdgeBin, addSrc(edges, src));\n","import { collections, } from 'turmeric';\nimport { addEdgeBin, addSrc, clearNeighborsBin, importEdgeBin, rmEdgeBin, } from './reducers';\nconst { spread, spreadKV, tuple, triple, addMap, get, spreadK, flatTuple, hasK, } = collections;\nconst { uniteMap, mapDiff, mapUnion, diff } = collections;\nconst { asMap, addBinMap, removeBinTuple, removeMap, removeBin } = collections;\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elements) => elements.reduce(addSrc, spawn());\nexport const nodes = edges => spreadK(asMap(edges));\nexport const adj = edges => src => edges.get(src) || new Map;\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const addNodes = edges => (...srcs) => srcs.reduce(addSrc, edges);\n\nexport const removeNodes = edges => (...nodes) =>\n  nodes.reduce(removeBin, edges);\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(triple(0)(src)).reduce(rmEdgeBin, edges);\n\nexport const mergeEdges = (edges = new Map) => (altEdges = new Map) =>\n new Map(spread(altEdges).reduce(importEdgeBin, edges));\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [ n, w ]);\n\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n\nexport const clearNeighbors = (edges = new Map) => (...srcs) =>\n  srcs.reduce(clearNeighborsBin, edges);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric';\n\nconst { addSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n\n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n\n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n\n  return bVisit(initPath(iNode))(new Set([ iNode ]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([ iNode ]);\n  const solutionSet = initPath(iNode);\n\n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n\n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n\n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n\n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n\n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n","import * as Reducers from './reducers';\nimport * as Graph from './graph';\nimport * as Traversals from './traversals';\n\nexport { Graph, Reducers, Traversals, };\n\n// exports.Graph = require('./graph');\n\n// exports.Reducers = require('./reducers');\n// exports.Utils = require('./utils');\n// exports.AsyncOps = require('./async_operators');\n\n// exports.Traversals = require('./traversals');\n"],"names":["spread","collections","addMap","get","spreadK","flatTuple","mapDiff","removeMap","set","Map","m","k","v","nabeMap","edges","src","nabes","addSrc","addEdgeBin","nb","wt","rmEdgeBin","clearNeighborsBin","importEdgeBin","nbs","map","reduce","tuple","triple","hasK","uniteMap","mapUnion","diff","asMap","addBinMap","removeBinTuple","removeBin","spawn","copy","fromElements","elements","nodes","adj","neighbors","contains","node","isAdjacent","nabe","addNodes","srcs","removeNodes","addEdges","w","removeEdges","mergeEdges","altEdges","addNeighbor","n","addEntry","clearNeighbors","mergeNeighbors","addSet","lastK","spreadV","popFirst","pathVal","pred","length","weight","path","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rCount","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0"],"mappings":"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"}