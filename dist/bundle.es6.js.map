{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/search.js","../src/strings.js","../src/operations.js"],"sourcesContent":["import { collections as coll, } from 'turmeric-utils';\n\nconst { addBinMap, mapDiff, spread, addMap, get, flatTuple, removeMap } = coll;\n\nexport const resetNodeBin = (edges, src) => addMap(edges)(src)(new Map);\n\nexport const addNodeBin = (edges, src) =>\n  addMap(edges)(src)(new Map(get(edges)(src)));\n\nexport const removeNodeBin = (edges, src) =>\n    addMap(edges)(src)(new Map(get(edges)(src)));\n\nexport const disconnectNode = edges => src =>\n     removeEdges(edges)(src)(...neighbors(edges)(src));\nexport const addEdgeBin = (edges, [ src, nb, wt = 0 ]) => [\n  [ src, addMap(get(edges)(src))(nb)(wt) ],\n  [ nb, addMap(get(edges)(nb))(src)(wt) ]].reduce(addBinMap, new Map(edges));\n\nexport const removeEdgeBin = (edges, [ src, nb, ]) => [\n  [ src, removeMap(get(edges)(src))(nb) ],\n  [ nb, removeMap(get(edges)(nb))(src) ]].reduce(addBinMap, new Map(edges));\n\nexport const importEdgeBin = (edges, [ src, nbs ]) =>\nspread(mapDiff(nbs)(get(edges)(src))).map(flatTuple(src))\n  .reduce(addEdgeBin, addNodeBin(edges, src));\n\nexport const mergeEdgesBin = (edges, alts) =>\n spread(new Map(alts)).reduce(importEdgeBin, edges);\n","import { collections, } from 'turmeric-utils';\nimport { addEdgeBin, addNodeBin, mergeEdgesBin, removeEdgeBin, resetNodeBin, }\nfrom './reducers';\n\nconst { triple, tuple, get, flatten, spreadK, hasK, } = collections;\nconst { addBinMap, removeBin, uniteMap, } = collections;\nconst flattenBin = (a = [], b = []) => flatten(a)(b);\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elems) => elems.reduce(addNodeBin, copy());\nexport const nodes = edges => spreadK(copy(edges));\nexport const adj = edges => src => copy(get(edges)(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const kvPair = k => v => [k, v];\n\nexport const nodeNeighbors = edges => src => neighbors(edges)(src).map(kvPair(src));\nexport const addNodes = edges => (...srcs) => srcs.reduce(addNodeBin, edges);\n\n  //  srcs.map(nodeNeighbors(edges))\n  //    .reduce(flattenBin, [])\n  //    .reduce(removeEdgeBin, copy(edges));\nexport const resetNodes = edges => (...srcs) => srcs.reduce(resetNodeBin, edges);\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(tuple(src)).reduce(removeEdgeBin, edges);\n\nexport const disconnectNodeBin = (edges, src) =>\n      removeEdges(edges)(src)(...neighbors(edges)(src));\n\nexport const disconnectNodes = edges => (...srcs) =>\n     srcs.reduce(disconnectNodeBin, copy(edges));\n\nexport const removeNodes = edges => (...srcs) =>\n    srcs.reduce(removeBin, disconnectNodes(edges)(...srcs));\n\nexport const mergeEdges = edges => (...alts) => alts.reduce(mergeEdgesBin, edges);\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [n, w]);\n\nexport const addEntry = nabes => ([n, w = 0]) => addBinMap(nabes, [n, w]);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric-utils';\n\nconst { addBinSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n\n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n\n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addBinSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n\n  return bVisit(initPath(iNode))(new Set([ iNode ]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([ iNode ]);\n  const solutionSet = initPath(iNode);\n\n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n\n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n\n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n\n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n\n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n","import { collections, } from 'turmeric-utils';\n\nconst { spread, spreadK, spreadV, spreadKV, last } = collections;\n\nexport const redStr = (str = ' ', val, id, coll) =>\n  val === last(coll) ? str.concat(val, ' ') : str.concat(val, ' , ');\nexport const collString = coll => spread(coll).reduce(redStr, '');\nexport const kString = coll => spreadK(coll).reduce(redStr, '');\nexport const vString = coll => spreadV(coll).reduce(redStr, '');\nexport const kvString = coll => spreadKV(coll).reduce(redStr, '');\n\nexport const pathString = path => ` { ${spreadK(path).join(' => ')} }`;\nexport const edgeString = ([ src, nbs ]) => `{ Edge ${src} >> [ ${kString(nbs)} ] } `;\n\nexport const componentString = ([ node, nbs ]) =>\n  `{ component ${node} >> [ ${kString(nbs)} ] } `;\n\nexport const graphString = edges =>\n  spreadKV(edges).reduce((str, [ node, nabes ], id) =>\n    str + edgeString([ node, nabes ]),\n    'Showing Edges\\n');\n\nexport const showGraph = ({ edges }) => (graphString(edges));\n","import { collections, } from 'turmeric-utils';\nimport { addEdges, addEntry, addNeighbor, addNodes, adj, contains, copy,\n  fromElements, isAdjacent, mergeEdges, mergeNeighbors, neighbors, nodeNeighbors,\n  nodes, removeEdges, removeNodes, resetNodes, spawn, } from './graph';\nimport { graphString, } from './strings';\nimport * as reducers from './reducers';\n\nconst { flatten, spread, first, removeBin, get, addMap } = collections;\n\nexport const superNode = src => nb =>\n  new Set([ src, nb ].map(el => el instanceof Set ? spread(el) : el));\n\nexport const combineNeighbors = g => src => nb =>\n  new Set(flatten(neighbors(g)(src))(neighbors(g)(nb)));\n\nexport const combineAdj = g => src => nb =>\n  new Map(flatten(adj(g)(src))(adj(g)(nb)));\n\nexport const superAdj = g => src => nb =>\n [ src, nb ].reduce(removeBin, combineAdj(g)(src)(nb));\n\nexport const superEdge = g => src => nb =>\n  addMap()(superNode(src)(nb))(superAdj(g)(src)(nb));\n\nexport const contract = g => src => (nb = first(neighbors(g)(src))) =>\nnb ? mergeEdges(removeNodes(g)(src, nb))(superEdge(g)(src)(nb)) : g;\n\nexport const contractBin = (g, [ src, nb ]) => contract(g)(src)(nb);\n\nexport const contractSrc = g => src =>\nnodeNeighbors(g)(src).reduce(contractBin, copy(g));\n\nexport const contractNext = (g, n = (first(nodes(g)))) =>\n  contract(copy(g))(n)();\n\nexport const contractAuto = g => nodes(g).reduce(contractNext, g);\nexport const contractMin = (g, min = 2) => {\n  console.log('g', (g));\n  return copy(g).size > min ? contractMin(contractNext(g), min) : copy(g);\n};\n"],"names":["addBinMap","coll","mapDiff","spread","addMap","get","flatTuple","removeMap","resetNodeBin","edges","src","Map","addNodeBin","removeNodeBin","disconnectNode","removeEdges","neighbors","addEdgeBin","nb","wt","reduce","removeEdgeBin","importEdgeBin","nbs","map","mergeEdgesBin","alts","triple","collections","tuple","spreadK","hasK","removeBin","uniteMap","spawn","copy","fromElements","elems","nodes","adj","contains","node","isAdjacent","nabe","kvPair","k","v","nodeNeighbors","addNodes","srcs","resetNodes","addEdges","w","nabes","disconnectNodeBin","disconnectNodes","removeNodes","mergeEdges","addNeighbor","n","addEntry","mergeNeighbors","addBinSet","lastK","diff","spreadV","popFirst","pathVal","pred","length","weight","addSrc","path","set","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rCount","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0","spreadKV","last","redStr","str","val","id","concat","collString","kString","vString","kvString","pathString","join","edgeString","componentString","graphString","showGraph","flatten","first","superNode","el","combineNeighbors","g","combineAdj","superAdj","superEdge","contract","contractBin","contractSrc","contractNext","contractAuto","contractMin","min","log"],"mappings":"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"}