{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/traversals.js"],"sourcesContent":["import { collections, } from 'turmeric';\n\nconst { spread, addMap, get, flatTuple, mapDiff, removeMap } = collections;\n\nexport const nabeMap = edges => src => new Map(get(edges)(src));\nexport const addSrc = (edges, src) => addMap(edges)(src)(nabeMap(edges)(src));\n\nexport const addEdgeBin = (edges = new Map, [ src, nb, wt = 0 ]) => edges\n  .set(src, addMap(nabeMap(edges)(src))(nb)(wt))\n  .set(nb, addMap(nabeMap(edges)(nb))(src)(wt));\n\nexport const rmEdgeBin = (edges = new Map, [ src, nb, ]) => edges\n  .set(src, removeMap(edges.get(src))(nb))\n  .set(nb, removeMap(edges.get(src))(src));\n\nexport const clearNeighborsBin = (edges = new Map, src) => edges.set(src, new Map);\n\nexport const importEdgeBin = (edges = new Map, [ src, nbs ] = [{}, new Map ]) =>\n   spread(mapDiff(nbs)(edges.get(src))).map(flatTuple(src))\n     .reduce(addEdgeBin, addSrc(edges, src));\n","import { collections, } from 'turmeric';\nimport { addEdgeBin, addSrc, clearNeighborsBin, importEdgeBin, rmEdgeBin, }\nfrom './reducers';\n\nconst { spread, triple, get, spreadK, hasK, } = collections;\nconst { addBinMap, removeBin, uniteMap, } = collections;\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elems) => elems.reduce(addSrc, copy());\nexport const nodes = edges => spreadK(copy(edges));\nexport const adj = edges => src => copy(get(edges)(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const addNodes = edges => (...srcs) => srcs.reduce(addSrc, edges);\nexport const removeNodes = edges => (...srcs) => srcs.reduce(removeBin, edges);\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(triple(0)(src)).reduce(rmEdgeBin, edges);\n\nexport const mergeEdges = (edges = new Map) => (altEdges = new Map) =>\n copy(spread(altEdges).reduce(importEdgeBin, edges));\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [ n, w ]);\n\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n\nexport const clearNeighbors = (edges = new Map) => (...srcs) =>\n  srcs.reduce(clearNeighborsBin, edges);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric';\n\nconst { addSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [n, w = 0]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [n, w] = [lastK(path), 0]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [n, w]));\n  \n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n    \n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n  \n  return bVisit(initPath(iNode))(new Set([iNode]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([iNode]);\n  const solutionSet = initPath(iNode);\n  \n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n    \n    for (const [nabe, nWeight] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n      \n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n  \n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n  \n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n"],"names":["spread","collections","addMap","get","flatTuple","mapDiff","removeMap","nabeMap","Map","edges","src","addSrc","addEdgeBin","nb","wt","set","rmEdgeBin","clearNeighborsBin","importEdgeBin","nbs","map","reduce","triple","spreadK","hasK","addBinMap","removeBin","uniteMap","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","node","isAdjacent","nabe","addNodes","srcs","removeNodes","addEdges","w","nabes","removeEdges","mergeEdges","altEdges","addNeighbor","n","addEntry","clearNeighbors","mergeNeighbors","addSet","lastK","diff","spreadV","popFirst","tuple","pathVal","pred","length","weight","path","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rCount","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0"],"mappings":"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"}