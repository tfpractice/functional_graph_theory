{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/traversals.js"],"sourcesContent":["import { collections as coll, } from 'turmeric';\n\nconst { spread, addMap, get, spreadK, flatTuple, mapDiff, removeMap } = coll;\n\nexport const nabeMap = edges => src => new Map(get(edges)(src));\nconst nabes = (edges = new Map) => src => spreadK(nabeMap(edges)(src));\n\nexport const addSrc = (edges, src) => addMap(edges)(src)(nabeMap(edges)(src));\n\nexport const addEdgeBin = (edges = new Map, [ src, nb, wt = 0 ]) => edges\n  .set(src, addMap(nabeMap(edges)(src))(nb)(wt))\n  .set(nb, addMap(nabeMap(edges)(nb))(src)(wt));\n\nexport const rmEdgeBin = (edges = new Map, [ src, nb, wt = 0 ]) => edges\n  .set(src, removeMap(edges.get(src))(nb))\n  .set(nb, removeMap(edges.get(src))(src));\n\nexport const clearNeighborsBin = (edges = new Map, src) =>\n  edges.set(src, new Map);\n\nexport const importEdgeBin = (edges = new Map, [ src, nbs ] = [ , new Map ]) =>\n   spread(mapDiff(nbs)(edges.get(src))).map(flatTuple(src)).reduce(addEdgeBin, addSrc(edges, src));\n","import { collections, } from 'turmeric';\nimport { addEdgeBin, addSrc, clearNeighborsBin, importEdgeBin, rmEdgeBin, }\nfrom './reducers';\n\nconst { spread, triple, get, spreadK, hasK, } = collections;\nconst { addBinMap, removeBin, uniteMap, } = collections;\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elems) => elems.reduce(addSrc, copy());\nexport const nodes = edges => spreadK(copy(edges));\nexport const adj = edges => src => copy(get(edges)(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const addNodes = edges => (...srcs) => srcs.reduce(addSrc, edges);\nexport const removeNodes = edges => (...srcs) => srcs.reduce(removeBin, edges);\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(triple(0)(src)).reduce(rmEdgeBin, edges);\n\nexport const mergeEdges = (edges = new Map) => (altEdges = new Map) =>\n copy(spread(altEdges).reduce(importEdgeBin, edges));\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [ n, w ]);\n\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n\nexport const clearNeighbors = (edges = new Map) => (...srcs) =>\n  srcs.reduce(clearNeighborsBin, edges);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric';\n\nconst { addSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [n, w = 0]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [n, w] = [lastK(path), 0]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [n, w]));\n  \n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n    \n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n  \n  return bVisit(initPath(iNode))(new Set([iNode]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([iNode]);\n  const solutionSet = initPath(iNode);\n  \n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n    \n    for (const [nabe, nWeight] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n      \n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n  \n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n  \n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n"],"names":["spread","coll","addMap","get","flatTuple","mapDiff","removeMap","nabeMap","Map","edges","src","addSrc","addEdgeBin","nb","wt","set","rmEdgeBin","clearNeighborsBin","importEdgeBin","nbs","map","reduce","collections","triple","spreadK","hasK","addBinMap","removeBin","uniteMap","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","node","isAdjacent","nabe","addNodes","srcs","removeNodes","addEdges","w","nabes","removeEdges","mergeEdges","altEdges","addNeighbor","n","addEntry","clearNeighbors","mergeNeighbors","addSet","lastK","diff","spreadV","popFirst","tuple","pathVal","pred","length","weight","path","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rCount","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0"],"mappings":"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"}