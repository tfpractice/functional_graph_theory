{"version":3,"file":null,"sources":["../src/reducers.js","../src/graph.js","../src/search.js","../src/strings.js"],"sourcesContent":["import { collections as coll, } from 'turmeric-utils';\n\nconst { addBinMap, mapDiff, spread, addMap, get, flatTuple, removeMap } = coll;\n\nexport const resetNodeBin = (edges, src) => addMap(edges)(src)(new Map);\n\nexport const addNodeBin = (edges, src) =>\n  addMap(edges)(src)(new Map(get(edges)(src)));\n\nexport const addEdgeBin = (edges, [ src, nb, wt = 0 ]) => [\n  [ src, addMap(get(edges)(src))(nb)(wt) ],\n  [ nb, addMap(get(edges)(nb))(src)(wt) ]].reduce(addBinMap, new Map(edges));\n\nexport const removeEdgeBin = (edges, [ src, nb, ]) => [\n  [ src, removeMap(get(edges)(src))(nb) ],\n  [ nb, removeMap(get(edges)(nb))(src) ]].reduce(addBinMap, new Map(edges));\n\nexport const importEdgeBin = (edges, [ src, nbs ]) =>\nspread(mapDiff(nbs)(get(edges)(src))).map(flatTuple(src))\n  .reduce(addEdgeBin, addNodeBin(edges, src));\n\nexport const mergeEdgesBin = (edges, alts) =>\n spread(new Map(alts)).reduce(importEdgeBin, edges);\n","import { collections, } from 'turmeric-utils';\nimport { addEdgeBin, addNodeBin, mergeEdgesBin, removeEdgeBin, resetNodeBin, }\nfrom './reducers';\n\nconst { triple, tuple, get, spreadK, hasK, } = collections;\nconst { addBinMap, removeBin, uniteMap, } = collections;\n\nexport const spawn = edges => new Map(edges);\nexport const copy = spawn;\nexport const fromElements = (...elems) => elems.reduce(addNodeBin, copy());\nexport const nodes = edges => spreadK(copy(edges));\nexport const adj = edges => src => copy(get(edges)(src));\nexport const neighbors = edges => src => nodes(adj(edges)(src));\nexport const contains = edges => node => hasK(edges)(node);\nexport const isAdjacent = edges => src => nabe =>\n  contains(adj(edges)(src))(nabe);\n\nexport const addNodes = edges => (...srcs) => srcs.reduce(addNodeBin, edges);\nexport const removeNodes = edges => (...srcs) => srcs.reduce(removeBin, copy(edges));\nexport const resetNodes = edges => (...srcs) => srcs.reduce(resetNodeBin, edges);\n\nexport const addEdges = edges => (src, w = 0) => (...nabes) =>\n  nabes.map(triple(w)(src)).reduce(addEdgeBin, edges);\n\nexport const removeEdges = edges => src => (...nabes) =>\n  nabes.map(tuple(src)).reduce(removeEdgeBin, edges);\n\nexport const mergeEdges = edges => (...alts) => alts.reduce(mergeEdgesBin, edges);\n\nexport const addNeighbor = edges => src => (n, w = 0) =>\n  addBinMap(adj(edges)(src), [ n, w ]);\n\nexport const addEntry = nabes => ([ n, w = 0 ]) => addBinMap(nabes, [ n, w ]);\n\nexport const mergeNeighbors = uniteMap;\n","import { collections, } from 'turmeric-utils';\n\nconst { addBinSet, lastK, hasK, mapDiff, diff, addBinMap, } = collections;\nconst { spread, spreadK, spreadV, popFirst, tuple, } = collections;\n\nconst pathVal = (pred = null) => (length = 1) => (weight = 0) =>\n  ({ pred, length, weight });\n\nconst addSrc = (path = new Map) => src =>\n  path.set(src, { pred: lastK(path), weight: 0, length: 1 });\n\nconst initPath = node => addSrc()(node);\nconst ptW = ({ weight = 0 }) => weight;\nconst ptL = ({ length = 1 }) => length;\nconst lastVal = path => path.get(lastK(path));\nconst lastW = path => ptW(lastVal(path));\nconst lastL = path => ptL(lastVal(path));\nconst nextW = path => (w = 0) => lastW(path) + w;\nconst nextL = path => lastL(path) ? lastL(path) + 1 : 1;\n\nconst nextPath = (path = new Map, [ n, w = 0 ]) =>\n  path.set(n, pathVal(lastK(path))(nextL(path))(nextW(path)(w)));\n\nexport const dfs = edges => (src) => {\n  const trav = (path = initPath(src), [ n, w ] = [ lastK(path), 0 ]) =>\n    spread(mapDiff(edges.get(n))(path)).reduce(trav, nextPath(path, [ n, w ]));\n\n  return trav(initPath(src));\n};\n\nexport const bfs = edges => (iNode) => {\n  const bVisit = bPath => (bQueue) => {\n    const pred = popFirst(bQueue);\n    const nextNabes = mapDiff(edges.get(pred))(bPath);\n\n    spread(nextNabes).reduce(nextPath, bPath);\n    spreadK(nextNabes).reduce(addBinSet, bQueue);\n    return bQueue.size > 0 ? bVisit(bPath)(bQueue) : bPath;\n  };\n\n  return bVisit(initPath(iNode))(new Set([ iNode ]));\n};\n\nexport const dijkstra = edges => (iNode) => {\n  const reachables = bfs(edges)(iNode);\n  const inspectQueue = new Set([ iNode ]);\n  const solutionSet = initPath(iNode);\n\n  while (inspectQueue.size > 0) {\n    const pred = popFirst(inspectQueue);\n    const nextNabes = edges.get(pred);\n    const { length: dCount, weight: dWeight } = solutionSet.get(pred);\n\n    for (const [ nabe, nWeight ] of nextNabes) {\n      const prevMap = reachables.get(nabe) || { length: 1, weight: 0 };\n      const { length: rCount, weight: rWeight } = prevMap;\n      const dMap = { pred, length: dCount + 1, weight: dWeight + nWeight, };\n      const sMap = ((dWeight + nWeight) < rWeight) ? dMap : prevMap;\n\n      if (!solutionSet.has(nabe)) {\n        inspectQueue.add(nabe);\n        solutionSet.set(nabe, sMap);\n      }\n    }\n  }\n\n  return solutionSet;\n};\n\nexport const components = (edges) => {\n  const trav = (comp = new Set, node) =>\n     diff(spreadK(edges.get(node)))(comp).reduce(trav, comp.add(node));\n  const visitMap = (mMap = new Map, node) =>\n     diff(trav(new Set, node))(mMap).map(tuple(trav(new Set, node)))\n       .reduce(addBinMap, mMap);\n\n  return spreadK(edges).reduce(visitMap, new Map);\n};\n\nexport const componentSet = edges => new Set(spreadV(components(edges)));\nexport const pathBetween = edges => n0 => n1 =>\n  hasK(components(edges).get(n1))(n0);\n","import { collections, } from 'turmeric-utils';\n\nconst { spread, spreadK, spreadV, spreadKV, last } = collections;\n\nexport const redStr = (str = ' ', val, id, coll) =>\n  val === last(coll) ? str.concat(val, ' ') : str.concat(val, ' , ');\nexport const collString = coll => spread(coll).reduce(redStr, '');\nexport const kString = coll => spreadK(coll).reduce(redStr, '');\nexport const vString = coll => spreadV(coll).reduce(redStr, '');\nexport const kvString = coll => spreadKV(coll).reduce(redStr, '');\n\nexport const pathString = path => ` { ${spreadK(path).join(' => ')} }`;\nexport const edgeString = ([ src, nbs ]) => `{ Edge ${src} >> [ ${kString(nbs)} ] } `;\n\nexport const componentString = ([ node, nbs ]) =>\n  `{ component ${node} >> [ ${kString(nbs)} ] } `;\n\nexport const graphString = edges =>\n  spreadKV(edges).reduce((str, [ node, nabes ], id) =>\n    str + edgeString([ node, nabes ]),\n    'Showing Edges\\n');\n\nexport const showGraph = ({ edges }) => (graphString(edges));\n"],"names":["addBinMap","coll","mapDiff","spread","addMap","get","flatTuple","removeMap","resetNodeBin","edges","src","Map","addNodeBin","addEdgeBin","nb","wt","reduce","removeEdgeBin","importEdgeBin","nbs","map","mergeEdgesBin","alts","triple","collections","tuple","spreadK","hasK","removeBin","uniteMap","spawn","copy","fromElements","elems","nodes","adj","neighbors","contains","node","isAdjacent","nabe","addNodes","srcs","removeNodes","resetNodes","addEdges","w","nabes","removeEdges","mergeEdges","addNeighbor","n","addEntry","mergeNeighbors","addBinSet","lastK","diff","spreadV","popFirst","pathVal","pred","length","weight","addSrc","path","set","initPath","ptW","ptL","lastVal","lastW","lastL","nextW","nextL","nextPath","dfs","trav","bfs","iNode","bVisit","bQueue","nextNabes","bPath","size","Set","dijkstra","reachables","inspectQueue","solutionSet","dCount","dWeight","nWeight","prevMap","rWeight","dMap","sMap","has","add","components","comp","visitMap","mMap","componentSet","pathBetween","n1","n0","spreadKV","last","redStr","str","val","concat","collString","kString","vString","kvString","pathString","join","edgeString","componentString","graphString","id","showGraph"],"mappings":"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"}