"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var isIterable=function(r){return!!r[Symbol.iterator]},iterify=function(r){return isIterable(r)?r:[r]},isRemovable=function(r){return!!r.delete},isHasable=function(r){return!!r.has},removify=function(r){return isRemovable(r)?r:new Set(iterify(r))},hasify=function(r){return isHasable(r)?r:new Set(iterify(r))},slicedToArray=function(){function r(r,n){var e=[],t=!0,o=!1,i=void 0;try{for(var a,u=r[Symbol.iterator]();!(t=(a=u.next()).done)&&(e.push(a.value),!n||e.length!==n);t=!0);}catch(r){o=!0,i=r}finally{try{!t&&u.return&&u.return()}finally{if(o)throw i}}return e}return function(n,e){if(Array.isArray(n))return n;if(Symbol.iterator in Object(n))return r(n,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),toConsumableArray=function(r){if(Array.isArray(r)){for(var n=0,e=Array(r.length);n<r.length;n++)e[n]=r[n];return e}return Array.from(r)},spread=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return[].concat(toConsumableArray(iterify(r)))},spreadK=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return spread(iterify(r).keys())},spreadV=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return spread(iterify(r).values())},spreadE=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return spread(iterify(r).entries())},spreadKV=spreadE,tuple=function(r){return function(n){return[n,r]}},triple=function(r){return function(n){return function(e){return[n,e,r]}}},flatten=function(r){return function(n){return[].concat(toConsumableArray(iterify(r)),toConsumableArray(iterify(n)))}},flattenBin=function(r,n){return flatten(r)(n)},flatTuple=function(r){return function(n){return[r].concat(toConsumableArray(iterify(n)))}},append=function(r){return function(n){return[].concat(toConsumableArray(iterify(r)),[n])}},has=function(r){return function(n){return hasify(r).has(n)}},hasK=function(r){return function(n){return has(spreadK(r))(n)}},xhasK=function(r){return function(n){return!hasK(r)(n)}},hasKV=function(r){return function(n){var e=slicedToArray(n,2),t=e[0];e[1];return hasK(r)(t)}},xhasKV=function(r){return function(n){var e=slicedToArray(n,2),t=e[0],o=e[1];return!hasKV(r)([t,o])}},asMap=function(r){return new Map(spreadKV(r))},addBinSet=function(r,n){return new Set(append(r)(n))},addBinMap=function(r,n){return new Map(append(r)(n))},removeBin=function(r,n){return removify(r).delete(n)?r:r},diff=function(r){return function(n){return spread(r).filter(xhasK(n))}},mapDiff=function(r){return function(n){return spread(r).filter(xhasKV(n)).reduce(addBinMap,new Map)}},uniteMap=function(r){return function(n){return spread(mapDiff(n)(r)).reduce(addBinMap,r)}},addMap=function(r){return function(n){return function(e){return asMap(r).set(n,e)}}},removeMap=function(r){return function(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];return e.reduce(removeBin,asMap(r))}},popElem=function(r){return function(n){return removeBin(r,n)&&n}},popFirst=function(r){return popElem(r)(spread(r).shift())},get$1=function(r){return function(n){return asMap(r).get(n)}},first=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return spread(r).shift()},last=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return spread(r).pop()},lastK=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return last(spreadK(r))},slicedToArray$1=function(){function r(r,n){var e=[],t=!0,o=!1,i=void 0;try{for(var a,u=r[Symbol.iterator]();!(t=(a=u.next()).done)&&(e.push(a.value),!n||e.length!==n);t=!0);}catch(r){o=!0,i=r}finally{try{!t&&u.return&&u.return()}finally{if(o)throw i}}return e}return function(n,e){if(Array.isArray(n))return n;if(Symbol.iterator in Object(n))return r(n,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),resetNodeBin=function(r,n){return addMap(r)(n)(asMap())},addNodeBin=function(r,n){return addMap(r)(n)(get$1(r)(n))},removeNodeBin=function(r,n){return addMap(r)(n)(get$1(r)(n))},neighborPairs=function(r){return function(n){return spreadK(get$1(r)(n)).map(append(n))}},addEdgeBin=function(r,n){var e=slicedToArray$1(n,3),t=e[0],o=e[1],i=e[2],a=void 0===i?0:i;return[[t,addMap(get$1(r)(t))(o)(a)],[o,addMap(get$1(r)(o))(t)(a)]].reduce(addBinMap,asMap(r))},removeEdgeBin=function(r,n){var e=slicedToArray$1(n,2),t=e[0],o=e[1];return[[t,removeMap(get$1(r)(t))(o)],[o,removeMap(get$1(r)(o))(t)]].reduce(addBinMap,asMap(r))},disconnectNodeBin=function(r,n){return neighborPairs(r)(n).reduce(removeEdgeBin,asMap(r))},importEdgeBin=function(r,n){var e=slicedToArray$1(n,2),t=e[0],o=e[1];return spread(mapDiff(o)(get$1(r)(t))).map(flatTuple(t)).reduce(addEdgeBin,addNodeBin(r,t))},mergeEdgesBin=function(r,n){return spread(asMap(n)).reduce(importEdgeBin,r)},mergeNeighbors=uniteMap,spawn=function(r){return asMap(r)},copy=spawn,fromElements=function(){for(var r=arguments.length,n=Array(r),e=0;e<r;e++)n[e]=arguments[e];return n.reduce(addNodeBin,copy())},nodes=function(r){return spreadK(copy(r))},adj=function(r){return function(n){return asMap(get$1(r)(n))}},neighbors=function(r){return function(n){return nodes(adj(r)(n))}},contains=function(r){return function(n){return hasK(r)(n)}},isAdjacent=function(r){return function(n){return function(e){return contains(adj(r)(n))(e)}}},addNodes=function(r){return function(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];return e.reduce(addNodeBin,r)}},resetNodes=function(r){return function(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];return e.reduce(resetNodeBin,r)}},addEdges=function(r){return function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return function(){for(var t=arguments.length,o=Array(t),i=0;i<t;i++)o[i]=arguments[i];return o.map(triple(e)(n)).reduce(addEdgeBin,r)}}},removeEdges=function(r){return function(n){return function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];return t.map(tuple(n)).reduce(removeEdgeBin,r)}}},disconnectNodes=function(r){return function(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];return e.reduce(disconnectNodeBin,copy(r))}},removeNodes=function(r){return function(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];return e.reduce(removeBin,disconnectNodes(r).apply(void 0,e))}},mergeEdges=function(r){return function(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];return e.reduce(mergeEdgesBin,r)}},addNeighbor=function(r){return function(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return addBinMap(adj(r)(n),[e,t])}}},addEntry=function(r){return function(n){var e=slicedToArray$1(n,2),t=e[0],o=e[1],i=void 0===o?0:o;return addBinMap(r,[t,i])}},pathVal=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return{pred:r,length:n,weight:e}}}},addSrc=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Map;return function(n){return r.set(n,{pred:lastK(r),weight:0,length:1})}},initPath=function(r){return addSrc()(r)},ptW=function(r){var n=r.weight,e=void 0===n?0:n;return e},ptL=function(r){var n=r.length,e=void 0===n?1:n;return e},lastVal=function(r){return r.get(lastK(r))},lastW=function(r){return ptW(lastVal(r))},lastL=function(r){return ptL(lastVal(r))},nextW=function(r){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return lastW(r)+n}},nextL=function(r){return lastL(r)?lastL(r)+1:1},nextPath=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Map,n=arguments[1],e=slicedToArray$1(n,2),t=e[0],o=e[1],i=void 0===o?0:o;return r.set(t,pathVal(lastK(r))(nextL(r))(nextW(r)(i)))},dfs=function(r){return function(n){var e=function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initPath(n),o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[lastK(t),0],i=slicedToArray$1(o,2),a=i[0],u=i[1];return spread(mapDiff(r.get(a))(t)).reduce(e,nextPath(t,[a,u]))};return e(initPath(n))}},bfs=function(r){return function(n){var e=function n(e){return function(t){var o=popFirst(t),i=mapDiff(r.get(o))(e);return spread(i).reduce(nextPath,e),spreadK(i).reduce(addBinSet,t),t.size>0?n(e)(t):e}};return e(initPath(n))(new Set([n]))}},dijkstra=function(r){return function(n){for(var e=bfs(r)(n),t=new Set([n]),o=initPath(n);t.size>0;){var i=popFirst(t),a=r.get(i),u=o.get(i),c=u.length,d=u.weight,s=!0,f=!1,p=void 0;try{for(var g,l=a[Symbol.iterator]();!(s=(g=l.next()).done);s=!0){var h=slicedToArray$1(g.value,2),v=h[0],m=h[1],y=e.get(v)||{length:1,weight:0},x=(y.length,y.weight),S={pred:i,length:c+1,weight:d+m},B=d+m<x?S:y;o.has(v)||(t.add(v),o.set(v,B))}}catch(r){f=!0,p=r}finally{try{!s&&l.return&&l.return()}finally{if(f)throw p}}}return o}},components=function(r){var n=function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Set,t=arguments[1];return diff(spreadK(r.get(t)))(e).reduce(n,e.add(t))},e=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Map,e=arguments[1];return diff(n(new Set,e))(r).map(tuple(n(new Set,e))).reduce(addBinMap,r)};return spreadK(r).reduce(e,new Map)},componentSet=function(r){return new Set(spreadV(components(r)))},pathBetween=function(r){return function(n){return function(e){return hasK(components(r).get(e))(n)}}},redStr=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" ",n=arguments[1],e=(arguments[2],arguments[3]);return n===last(e)?r.concat(n," "):r.concat(n," , ")},collString=function(r){return spread(r).reduce(redStr,"")},kString=function(r){return spreadK(r).reduce(redStr,"")},vString=function(r){return spreadV(r).reduce(redStr,"")},kvString=function(r){return spreadKV(r).reduce(redStr,"")},pathString=function(r){return" { "+spreadK(r).join(" => ")+" }"},edgeString=function(r){var n=slicedToArray$1(r,2),e=n[0],t=n[1];return"{ Edge "+e+" >> [ "+kString(t)+" ] } "},componentString=function(r){var n=slicedToArray$1(r,2),e=n[0],t=n[1];return"{ component "+e+" >> [ "+kString(t)+" ] } "},graphString=function(r){return spreadKV(r).reduce(function(r,n,e){var t=slicedToArray$1(n,2),o=t[0],i=t[1];return r+edgeString([o,i])},"Showing Edges\n")},showGraph=function(r){var n=r.edges;return graphString(n)},autoSpread=function r(n){return n[Symbol.iterator]?spread(n).reduce(flattenBin,[]).map(r):n},superNode=function(r){return function(n){return new Set([r,n])}},combineNeighbors=function(r){return function(n){return function(e){return new Set(flatten(neighbors(r)(n))(neighbors(r)(e)))}}},combineAdj=function(r){return function(n){return function(e){return new Map(flatten(adj(r)(n))(adj(r)(e)))}}},superAdj=function(r){return function(n){return function(e){return[n,e].reduce(removeBin,combineAdj(r)(n)(e))}}},superEdge=function(r){return function(n){return function(e){return addMap()(superNode(n)(e))(superAdj(r)(n)(e))}}},contract=function(r){return function(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:first(neighbors(r)(n));return e?mergeEdges(removeNodes(r)(n,e))(superEdge(r)(n)(e)):r}}},contractBin=function(r,n){var e=slicedToArray$1(n,2),t=e[0],o=e[1];return contract(r)(t)(o)},contractSrc=function(r){return function(n){return neighborPairs(r)(n).reduce(contractBin,copy(r))}},contractNext=function(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:first(nodes(r));return contract(copy(r))(n)()},contractAuto=function(r){return nodes(r).reduce(contractNext,r)},contractMin=function r(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return n.size>e?r(contractNext(n),e):copy(n)},operations=Object.freeze({autoSpread:autoSpread,superNode:superNode,combineNeighbors:combineNeighbors,combineAdj:combineAdj,superAdj:superAdj,superEdge:superEdge,contract:contract,contractBin:contractBin,contractSrc:contractSrc,contractNext:contractNext,contractAuto:contractAuto,contractMin:contractMin});exports.default=fromElements,exports.Operations=operations,exports.resetNodeBin=resetNodeBin,exports.addNodeBin=addNodeBin,exports.removeNodeBin=removeNodeBin,exports.neighborPairs=neighborPairs,exports.addEdgeBin=addEdgeBin,exports.removeEdgeBin=removeEdgeBin,exports.disconnectNodeBin=disconnectNodeBin,exports.importEdgeBin=importEdgeBin,exports.mergeEdgesBin=mergeEdgesBin,exports.mergeNeighbors=mergeNeighbors,exports.spawn=spawn,exports.copy=copy,exports.fromElements=fromElements,exports.nodes=nodes,exports.adj=adj,exports.neighbors=neighbors,exports.contains=contains,exports.isAdjacent=isAdjacent,exports.addNodes=addNodes,exports.resetNodes=resetNodes,exports.addEdges=addEdges,exports.removeEdges=removeEdges,exports.disconnectNodes=disconnectNodes,exports.removeNodes=removeNodes,exports.mergeEdges=mergeEdges,exports.addNeighbor=addNeighbor,exports.addEntry=addEntry,exports.initPath=initPath,exports.ptW=ptW,exports.ptL=ptL,exports.lastVal=lastVal,exports.lastW=lastW,exports.lastL=lastL,exports.nextW=nextW,exports.nextL=nextL,exports.nextPath=nextPath,exports.dfs=dfs,exports.bfs=bfs,exports.dijkstra=dijkstra,exports.components=components,exports.componentSet=componentSet,exports.pathBetween=pathBetween,exports.redStr=redStr,exports.collString=collString,exports.kString=kString,exports.vString=vString,exports.kvString=kvString,exports.pathString=pathString,exports.edgeString=edgeString,exports.componentString=componentString,exports.graphString=graphString,exports.showGraph=showGraph;
//# sourceMappingURL=bundle.cjs.js.map
