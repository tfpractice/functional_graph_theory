"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var turmericUtils=require("turmeric-utils"),slicedToArray=function(){function e(e,r){var t=[],n=!0,i=!1,o=void 0;try{for(var a,d=e[Symbol.iterator]();!(n=(a=d.next()).done)&&(t.push(a.value),!r||t.length!==r);n=!0);}catch(e){i=!0,o=e}finally{try{!n&&d.return&&d.return()}finally{if(i)throw o}}return t}return function(r,t){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return e(r,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),addBinMap=turmericUtils.collections.addBinMap,mapDiff=turmericUtils.collections.mapDiff,spread=turmericUtils.collections.spread,addMap=turmericUtils.collections.addMap,get$$1=turmericUtils.collections.get,flatTuple=turmericUtils.collections.flatTuple,removeMap=turmericUtils.collections.removeMap,resetNodeBin=function(e,r){return addMap(e)(r)(new Map)},addNodeBin=function(e,r){return addMap(e)(r)(new Map(get$$1(e)(r)))},addEdgeBin=function(e,r){var t=slicedToArray(r,3),n=t[0],i=t[1],o=t[2],a=void 0===o?0:o;return[[n,addMap(get$$1(e)(n))(i)(a)],[i,addMap(get$$1(e)(i))(n)(a)]].reduce(addBinMap,new Map(e))},removeEdgeBin=function(e,r){var t=slicedToArray(r,2),n=t[0],i=t[1];return[[n,removeMap(get$$1(e)(n))(i)],[i,removeMap(get$$1(e)(i))(n)]].reduce(addBinMap,new Map(e))},importEdgeBin=function(e,r){var t=slicedToArray(r,2),n=t[0],i=t[1];return spread(mapDiff(i)(get$$1(e)(n))).map(flatTuple(n)).reduce(addEdgeBin,addNodeBin(e,n))},mergeEdgesBin=function(e,r){return spread(new Map(r)).reduce(importEdgeBin,e)},triple=turmericUtils.collections.triple,tuple=turmericUtils.collections.tuple,get$2=turmericUtils.collections.get,spreadK=turmericUtils.collections.spreadK,hasK=turmericUtils.collections.hasK,addBinMap$1=turmericUtils.collections.addBinMap,removeBin=turmericUtils.collections.removeBin,uniteMap=turmericUtils.collections.uniteMap,spawn=function(e){return new Map(e)},copy=spawn,fromElements=function(){for(var e=arguments.length,r=Array(e),t=0;t<e;t++)r[t]=arguments[t];return r.reduce(addNodeBin,copy())},nodes=function(e){return spreadK(copy(e))},adj=function(e){return function(r){return copy(get$2(e)(r))}},neighbors=function(e){return function(r){return nodes(adj(e)(r))}},contains=function(e){return function(r){return hasK(e)(r)}},isAdjacent=function(e){return function(r){return function(t){return contains(adj(e)(r))(t)}}},addNodes=function(e){return function(){for(var r=arguments.length,t=Array(r),n=0;n<r;n++)t[n]=arguments[n];return t.reduce(addNodeBin,e)}},removeNodes=function(e){return function(){for(var r=arguments.length,t=Array(r),n=0;n<r;n++)t[n]=arguments[n];return t.reduce(removeBin,copy(e))}},resetNodes=function(e){return function(){for(var r=arguments.length,t=Array(r),n=0;n<r;n++)t[n]=arguments[n];return t.reduce(resetNodeBin,e)}},addEdges=function(e){return function(r){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return function(){for(var n=arguments.length,i=Array(n),o=0;o<n;o++)i[o]=arguments[o];return i.map(triple(t)(r)).reduce(addEdgeBin,e)}}},removeEdges=function(e){return function(r){return function(){for(var t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];return n.map(tuple(r)).reduce(removeEdgeBin,e)}}},mergeEdges=function(e){return function(){for(var r=arguments.length,t=Array(r),n=0;n<r;n++)t[n]=arguments[n];return t.reduce(mergeEdgesBin,e)}},addNeighbor=function(e){return function(r){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return addBinMap$1(adj(e)(r),[t,n])}}},addEntry=function(e){return function(r){var t=slicedToArray(r,2),n=t[0],i=t[1],o=void 0===i?0:i;return addBinMap$1(e,[n,o])}},mergeNeighbors=uniteMap,addBinSet=turmericUtils.collections.addBinSet,lastK=turmericUtils.collections.lastK,hasK$1=turmericUtils.collections.hasK,mapDiff$1=turmericUtils.collections.mapDiff,diff=turmericUtils.collections.diff,addBinMap$2=turmericUtils.collections.addBinMap,spread$1=turmericUtils.collections.spread,spreadK$1=turmericUtils.collections.spreadK,spreadV=turmericUtils.collections.spreadV,popFirst=turmericUtils.collections.popFirst,tuple$1=turmericUtils.collections.tuple,pathVal=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return{pred:e,length:r,weight:t}}}},addSrc=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Map;return function(r){return e.set(r,{pred:lastK(e),weight:0,length:1})}},initPath=function(e){return addSrc()(e)},ptW=function(e){var r=e.weight,t=void 0===r?0:r;return t},ptL=function(e){var r=e.length,t=void 0===r?1:r;return t},lastVal=function(e){return e.get(lastK(e))},lastW=function(e){return ptW(lastVal(e))},lastL=function(e){return ptL(lastVal(e))},nextW=function(e){return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return lastW(e)+r}},nextL=function(e){return lastL(e)?lastL(e)+1:1},nextPath=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Map,r=arguments[1],t=slicedToArray(r,2),n=t[0],i=t[1],o=void 0===i?0:i;return e.set(n,pathVal(lastK(e))(nextL(e))(nextW(e)(o)))},dfs=function(e){return function(r){var t=function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:initPath(r),i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[lastK(n),0],o=slicedToArray(i,2),a=o[0],d=o[1];return spread$1(mapDiff$1(e.get(a))(n)).reduce(t,nextPath(n,[a,d]))};return t(initPath(r))}},bfs=function(e){return function(r){var t=function r(t){return function(n){var i=popFirst(n),o=mapDiff$1(e.get(i))(t);return spread$1(o).reduce(nextPath,t),spreadK$1(o).reduce(addBinSet,n),n.size>0?r(t)(n):t}};return t(initPath(r))(new Set([r]))}},dijkstra=function(e){return function(r){for(var t=bfs(e)(r),n=new Set([r]),i=initPath(r);n.size>0;){var o=popFirst(n),a=e.get(o),d=i.get(o),s=d.length,c=d.weight,u=!0,l=!1,p=void 0;try{for(var g,f=a[Symbol.iterator]();!(u=(g=f.next()).done);u=!0){var m=slicedToArray(g.value,2),v=m[0],h=m[1],S=t.get(v)||{length:1,weight:0},x=(S.length,S.weight),B={pred:o,length:s+1,weight:c+h},y=c+h<x?B:S;i.has(v)||(n.add(v),i.set(v,y))}}catch(e){l=!0,p=e}finally{try{!u&&f.return&&f.return()}finally{if(l)throw p}}}return i}},components=function(e){var r=function r(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Set,n=arguments[1];return diff(spreadK$1(e.get(n)))(t).reduce(r,t.add(n))},t=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Map,t=arguments[1];return diff(r(new Set,t))(e).map(tuple$1(r(new Set,t))).reduce(addBinMap$2,e)};return spreadK$1(e).reduce(t,new Map)},componentSet=function(e){return new Set(spreadV(components(e)))},pathBetween=function(e){return function(r){return function(t){return hasK$1(components(e).get(t))(r)}}},spread$2=turmericUtils.collections.spread,spreadK$2=turmericUtils.collections.spreadK,spreadV$1=turmericUtils.collections.spreadV,spreadKV=turmericUtils.collections.spreadKV,last=turmericUtils.collections.last,redStr=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" ",r=arguments[1],t=(arguments[2],arguments[3]);return r===last(t)?e.concat(r," "):e.concat(r," , ")},collString=function(e){return spread$2(e).reduce(redStr,"")},kString=function(e){return spreadK$2(e).reduce(redStr,"")},vString=function(e){return spreadV$1(e).reduce(redStr,"")},kvString=function(e){return spreadKV(e).reduce(redStr,"")},pathString=function(e){return" { "+spreadK$2(e).join(" => ")+" }"},edgeString=function(e){var r=slicedToArray(e,2),t=r[0],n=r[1];return"{ Edge "+t+" >> [ "+kString(n)+" ] } "},componentString=function(e){var r=slicedToArray(e,2),t=r[0],n=r[1];return"{ component "+t+" >> [ "+kString(n)+" ] } "},graphString=function(e){return spreadKV(e).reduce(function(e,r,t){var n=slicedToArray(r,2),i=n[0],o=n[1];return e+edgeString([i,o])},"Showing Edges\n")},showGraph=function(e){var r=e.edges;return graphString(r)};exports.default=fromElements,exports.resetNodeBin=resetNodeBin,exports.addNodeBin=addNodeBin,exports.addEdgeBin=addEdgeBin,exports.removeEdgeBin=removeEdgeBin,exports.importEdgeBin=importEdgeBin,exports.mergeEdgesBin=mergeEdgesBin,exports.spawn=spawn,exports.copy=copy,exports.fromElements=fromElements,exports.nodes=nodes,exports.adj=adj,exports.neighbors=neighbors,exports.contains=contains,exports.isAdjacent=isAdjacent,exports.addNodes=addNodes,exports.removeNodes=removeNodes,exports.resetNodes=resetNodes,exports.addEdges=addEdges,exports.removeEdges=removeEdges,exports.mergeEdges=mergeEdges,exports.addNeighbor=addNeighbor,exports.addEntry=addEntry,exports.mergeNeighbors=mergeNeighbors,exports.dfs=dfs,exports.bfs=bfs,exports.dijkstra=dijkstra,exports.components=components,exports.componentSet=componentSet,exports.pathBetween=pathBetween,exports.redStr=redStr,exports.collString=collString,exports.kString=kString,exports.vString=vString,exports.kvString=kvString,exports.pathString=pathString,exports.edgeString=edgeString,exports.componentString=componentString,exports.graphString=graphString,exports.showGraph=showGraph;
//# sourceMappingURL=bundle.cjs.js.map
